                                           React Native
..............................................................................................

What is React Native?

1.React Native is js lib for building native mobile apps 
2.React Native combines the best parts of native development with React, a best-in-class  JavaScript library for building user interfaces.

Mobile App development:

 Mobile apps are built using mobile platforms and os.

Mobile platforms:
1.Android
2.Ios

Mobile devices are acting front end devices, user interfaces communicates back end services.

Dev:
 1.user interface developer/front end developer
 2.back end developer
 3.full stack developer.

Front end developer who dev apps for  front devices.

Devices:
 1.computers - desktop
 2.Hand held devices- Mobiles,Tabs..
 3.TV,Game consoles
 4.IOT devices- It could be any - watches,car,industrial apps,

Dev generally build apps for desktops:
  Standalone desktop apps
  Browser based apps- javascript,html,css - react,angular,vue.....

Mobile /Tab apps:
 Dev builds apps for android platform using java , kotlin pl.
 in iOS development, you use Swift or Objective-C.

Types of mobile Apps:
.....................

1.Native Mobile
2.Web apps
3.Hybrid apps

1.Native Mobile
   Mobile apps are built by using native platform languages- java / Swift.
2.Web apps
   Apps built for browsers -Mobile browsers
3.Hybrid  apps
   built apps using javascript but it wont run inside browser, runs inside mobile using container(WebView).


Hybrid apps:

 Application built using javascript,css,html,looks like native apps.

Why Hybrid Apps?

-incase native apps, we need to maintain two code base for both platform.

Why not to build one single portable app for all platforms?

 That is birth of hybrid apps.

Hybrids apps can be built using existing web tech- js,css,html.
Js is simple dom language, how to acess platform services such as contacts,networks,storage..
- a lib was created -cordova , based on cordova adobe started building a framework on top of the cordova , called phoneGap.

...........................................................................................

How to build mobile native apps in portable way using same javascript technology without html and css?

That is birth of React Native.

/////////////////////////////////////////////////////////////////////////////////////////////

React Native Architecture :
...........................

React native applications are written using react(js) core principles
 -Component
 -Props
 -State
 -Event Handling

Every react native apps are simple javascript code.

In React Native, there is no webview concept. React native never run inside browser.

Types of React Native code:

React Native code consist of Two things:
.......................................

1.UI MARK UP Code
   -  incase of react , html is mark up

UI Mark Up code for React native:

React native does not use html language to build ui elements.
React Native provides a high level ui components already written, so we can use those
components only.Why?
 We are building portable application either for android or ios.
So we need generic concept for both  platforms. 
For that React native provides a generic components for both platforms.

Compilation:

What is it? What is happening during compilation?

Source code is converted into another source code - Compilation.
Another code is platform specific code. android code or ios code.
if i wirte ui components, ui components will be converted to platform spefic components.
javascript code will be emitted as it is-app code.



2.Application logic code
   - js code - apis,state,props......


1.Source Code
    written in react - UI Code and app logic

2.Compiled code
    code converted into platform specific code.

////////////////////////////////////////////////////////////////////////////////////////////

How react native apps are executed?  Execution Model:
.....................................................

All views are executed by platform runtimes eg: android by art.
All javascript is executed by Hermes Js engine.
https://hermesengine.dev/
//////////////////////////////////////////////////////////////////////////////////////////////

How to build react native apps?


React native apps can be built using two work flows.


1.Native Work flow

 If you are already familiar with mobile development, you may want to use React Native CLI.
 It requires Xcode or Android Studio to get started. If you already have one of these tools installed, you should be able to get up and running within a few minutes. If they are not installed, you should expect to spend about an hour installing and configuring them.

2.Expo Work Flow.
  If you are new to mobile development, the easiest way to get started is with Expo CLI. Expo is a set of tools built around React Native and, while it has many features, the most relevant feature for us right now is that it can get you writing a React Native app within minutes


/////////////////////////////////////////////////////////////////////////////////////////////

Native work flow:
 
if you want to build professional mobile app you need lot of infrastructure.
 UI Components
    -Views,Text,Labels,ListViews,ScrollView,TabView...........

React native core team provides all core components necessary to build mobile apps.

What if i want more components which is not supported by react core team.

YOu need to look at community or companies who provides professional mobile apps.

-Community -https://reactnative.directory/


Expo Work flow:
...............
What is expo?

 Expo is a framework and a platform for universal React applications. It is a set of tools and services built around React Native and native platforms that help you develop, build, deploy, and quickly iterate on iOS, Android, and web apps from the same JavaScript/TypeScript codebase.
//////////////////////////////////////////////////////////////////////////////////////////////

Setup :

Expo work flow Setup
....................

1.install expo-cli

npm install -g expo-cli

2.Create project

expo init AwesomeProject
cd AwesomeProject
npm start # you can also use: expo start

Expo apps can be created in two ways


Managed Work flow:

  With the managed workflow you only write JavaScript / TypeScript and Expo tools and services take care of everything else for you.

  The managed workflow is kind of like Rails and Create React App, but for React Native.

Apps are built with the managed workflow using the expo-cli, the Expo Go app on your mobile device, and our various services: push notifications, the build service, and over-the-air (OTA) updates. 

Expo tries to manage as much of the complexity of building apps for you as we can, which is why we call it the managed workflow.

 A developer using the managed workflow doesn't use Xcode or Android Studio, they just write JavaScript code and manage configuration for things like the app icon and splash screen through app.json.

 The Expo SDK exposes an increasingly comprehensive set of APIs that give you the power to access device capabilities like the camera, biometric authentication, file system, haptics, and so on.

Bare Work flow:

  In the bare workflow you have full control over every aspect of the native project, and Expo tools and services are a little more limited.

In the bare workflow the developer has complete control, along with the complexity that comes with that. You can use most APIs in the Expo SDK, but the build service and easy Configuration with app.json / app.config.js are not yet supported.

Running your React Native application in case of expo work flow:
.................................................................

1.You can run and test app inside browser itself- this is not recommended for complex apps.

2.You can run inside your device directly.
  Expo offers called expo client.
3.You can use emulators -Andorid virtual devices or emulators.

Metro Bundler:
-Online compiler, compiles code into react native 
////////////////////////////////////////////////////////////////////////////////////////////


Create Native Project: Using native work flow:
..............................................

Steps:
......

1.npm install react-native-cli -g

2.Create Project
 react-native init AwesomeNativeProject

3.Running Project
 Run instructions for Android:
    • Have an Android emulator running (quickest way to get started), or a device connected.
    • cd "C:\session\ibm\2021\march\reactnative\AwesomeNativeProject" && npx react-native run-android

Android Builder:
info Running jetifier to migrate libraries to AndroidX. You can disable it using "--no-jetifier" flag.
Jetifier found 903 file(s) to forward-jetify. Using 12 workers...
info Starting JS server...
* daemon not running; starting now at tcp:5037
* daemon started successfully
info Launching emulator...
info Successfully launched emulator.
info Installing the app...
Downloading https://services.gradle.org/distributions/gradle-6.7-all.zip
.............10%..............20%..............30%..............40%..............50%..............60%..............70%..............80%..............90%..............100%

Welcome to Gradle 6.7!

Here are the highlights of this release:
 - File system watching is ready for production use
 - Declare the version of Java your build requires
 - Java 15 support

For more details see https://docs.gradle.org/6.7/release-notes.html

Starting a Gradle Daemon (subsequent builds will be faster)
File C:\Users\sasub\.android\repositories.cfg could not be loaded.
Checking the license for package Android SDK Build-Tools 29.0.2 in C:\Users\sasub\AppData\Local\Android\Sdk\licenses
License for package Android SDK Build-Tools 29.0.2 accepted.
Preparing "Install Android SDK Build-Tools 29.0.2 (revision: 29.0.2)".
"Install Android SDK Build-Tools 29.0.2 (revision: 29.0.2)" ready.
Installing Android SDK Build-Tools 29.0.2 in C:\Users\sasub\AppData\Local\Android\Sdk\build-tools\29.0.2
"Install Android SDK Build-Tools 29.0.2 (revision: 29.0.2)" complete.
"Install Android SDK Build-Tools 29.0.2 (revision: 29.0.2)" finished.

> Task :app:compileDebugJavaWithJavac

> Task :app:stripDebugDebugSymbols
Unable to strip the following libraries, packaging them as they are: libc++_shared.so, libevent-2.1.so, libevent_core-2.1.so, libevent_extra-2.1.so, libfb.so, libfbjni.so, libflipper.so, libfolly_futures.so, libfolly_json.so, libglog.so, libglog_init.so, libhermes-executor-common-debug.so, libhermes-executor-common-release.so, libhermes-executor-debug.so, libhermes-executor-release.so, libhermes-inspector.so, libimagepipeline.so, libjsc.so, libjscexecutor.so, libjsijniprofiler.so, libjsinspector.so, libnative-filters.so, libnative-imagetranscoder.so, libreact_codegen_reactandroidspec.so, libreact_nativemodule_core.so, libreactnativeblob.so, libreactnativejni.so, libreactnativeutilsjni.so, libreactperfloggerjni.so, libturbomodulejsijni.so, libyoga.so.

> Task :app:installDebug
Installing APK 'app-debug.apk' on 'Nexus_6_API_29(AVD) - 10' for app:debug
Installed on 1 device.

BUILD SUCCESSFUL in 5m 10s
29 actionable tasks: 29 executed
info Connecting to the development server...
8081
info Starting the app on "emulator-5554"...
Starting: Intent { cmp=com.awesomenativeproject/.MainActivity }
////////////////////////////////////////////////////////////////////////////////////////////

Entry point For react native application? How to mount react native apps?

import {AppRegistry} from 'react-native';
import App from './App';
import {name as appName} from './app.json';

AppRegistry.registerComponent(appName, () => App);
/////////////////////////////////////////////////////////////////////////////////////////////

React Native Application Architecture:
......................................

React Native apps are collection of components(From react native core,third party components,expo components).

Basic template :

import React from 'react'

Components:
...........
Text,View,Image,TextInput,StyleSheet,ScrollView

1.Text --- <p>

import React from 'react';
import {Text} from 'react-native';


export default function App(){
    return <Text>Hello!</Text>
}

2.View 

 The most fundamental component for building a UI, View is a container that supports layout with flexbox, style, some touch handling, and accessibility controls. 
View maps directly to the native view equivalent on whatever platform React Native is running on, whether that is a UIView, <div>, android.view, etc.

import React from 'react';
import { Text, View } from 'react-native';


export default function App() {
    return <View>
            <Text>Hello View!</Text>
    </View>
}

Any thing will be rendered from left most corner, how to align.
....................................................................................
eg:
import { Greeter } from "./Greeter/Greeter";

function App(){
     return <>
         <Greeter name={"Subramanian"} message={"Hello"} />
     </>
}
export default App;

Greeter/Greeter.jsx
import { Text, View } from "react-native";

export const Greeter = props => {
    const { name, message } = props;
    return <View>
        <Text>{message} {name}</Text>
    </View>
}
//Default Props
Greeter.defaultProps = {
    name: 'Name',
    message: 'Welcome'
}
....................................................................................

Assignment:
  Create Blogs in the React Native which already we have done in the React web.

Styles:
.......

In react Styles are added through css, react native does not css because no html is used.

React Native does not allow css directly. Java script has api to add styles via code.

eg.
in html

document.getElementById('myid').styles.add.backgroundColor='red'

React Native uses javascript api to add styles to any UI Element.

Style is Object, which contains properties

 element.style.property

StyleSheet
   A StyleSheet is an abstraction similar to CSS StyleSheets

StyleSheet object has method called "create" mehtod


StyleSheet.create({
 styleProperty: propvalue,
 stylePropery:{
    styleProp:propValue
 }
});

Refer :https://www.w3schools.com/jsref/dom_obj_style.asp

eg:

import React from 'react';
import { Text, View, StyleSheet } from 'react-native';

export const { container, text } = StyleSheet.create({
    container: {
        flex: 1,
        padding: 24,
        backgroundColor: "#eaeaea"
    },
    text: {
        color: "blue",
        textAlign: "center",
        fontSize: 30
    }
});

export default function App() {
    return <View style={container}>
        <Text style={text}>Hello View!</Text>
        {/**in line style */}
        <Text style={{
            color: "red",
            textAlign: "center",
            fontSize: 30
        }}>Hello View!</Text>

    </View>
}

// export default function App() {
//     return <View style={appStyles.container}>
//         <Text style={appStyles.text}>Hello View!</Text>
//         {/**in line style */}
//         <Text style={{
//             color: "red",
//             textAlign: "center",
//             fontSize: 30
//         }}>Hello View!</Text>

//     </View>
// }
// const appStyles = StyleSheet.create({
//     container: {
//         flex: 1,
//         padding: 24,
//         backgroundColor: "#eaeaea"
//     },
//     text: {
//         color: "#20232a",
//         textAlign: "center",
//         fontSize: 30
//     }
// });

//////////////////////////////////////////////////////////////////////////////////////////////

State:
import { useState } from "react"
import { View, Text, Button } from 'react-native'

export const Counter = props => {
    const [value, setValue] = useState(0)
    const onIncrement = () => {
         setValue(value + 1)
    }
    return <View>
        <Text>Counter App</Text>
        <Text>Value {value}</Text>
        <Button
          title="Increment"
          onPress={onIncrement}
        />
    </View>
}

App.js

import { Counter } from "./src/Counter/counter";
import { View,StyleSheet } from "react-native";

function App() {
     return <View  style={styles.container}>
          <Counter />
     </View>
}
export default App;


const styles = StyleSheet.create({
     container: {
          flex: 1,
          fontWeight:'bold',
          backgroundColor: 'pink',
          alignItems: 'center',
          justifyContent: 'center',
     },
});
.....................................................................................

export default App;





....................................................................................
				Styling
...................................................................................
In react styles are added through css, react native does not have css language because no html is used.

React Native does not allow css directly.
We are going to use "javascript style apis"
Javascript has api to add styles via code.

You must have knowledge to identify the css "js" properties.


In html how to apply style via js:

document.getElementById(id).style.property = new style
element.style.propery =value

https://www.w3schools.com/jsref/dom_obj_style.asp

React Native uses a Object to add styles.
 =>StyleSheet

StyleSheet:
 It is  abstraction to css.

import { StyleSheet, Text, View } from 'react-native'

const Message = props => {
    return <Text style={styles.label}>{props.message}</Text>
}

const App = () => {
    return <View>
        <Message message="Hello" />
    </View>

}
export default App;

//Style sheet Object 
const styles = StyleSheet.create({
    label: {
        fontSize: 90,
        fontWeight:'bold',
        fontFamily: "TGaramond",
        color:'#61dafb',
        borderWidth:4
    }
})


<div style={{backgroundColor:'red'}} />

Syntax:

 const styles = StyleSheet.create({
  styleProperty:PropValue,
  styleProperty: {
      prop1:value1,
      prop2:value2,
      prop3:value3
   
  }
 })

How to declare inline style?

   <Text style={{
            fontSize: 90,
            fontWeight: 'bold',
            fontFamily: "TGaramond",
            color: '#61dafb',
            borderWidth: 4
        }}>{props.message}</Text>

How to use colors?

 -color names; red blue; which is not mostly recommended.
 -color values ; #

Color apis:

PlatformColor
   Lets your reference the Platform's color

DynamiColorIOS 
   It is IOS specific and allows you to specify which colors should be used in light and dark Mode.

PlatformColor(color1, [color2, ...colorN]);

 You can use the PlatformColor function to access native colors on the target platform by supplying the native color’s corresponding string value

If you pass more than one string value to the PlatformColor function, it will treat the first value as the default and the rest as fallback.

PlatformColor('bogusName', 'linkColor');

Supported colors:
For a full list of the types of system colors supported.

Android:
R.attr - ?attr prefix

R.color - @android:color prefix


iOS (Objective-C and Swift notations):

UIColor Standard Colors
UIColor UI Element Colors

select method how works?
 select internally applies if logic to select os

Platform.OS === 'platform' or a Platform.select()

if(Platform.OS==='android'){
  apply logic for android
}else{ 
  apply logic for ios
}

Platform.select({
  android:{
    
  },
  ios:{
    
  },
  default:{

 }
})

StyleSheet.create({
  container: {
  width:100,

  ...Platform.select({
  android:{
    backgroundColor:'green'
  },
  ios:{
     backgroundColor:'yellow'
  },
  },
  default:{
     backgroundColor:'gray'
  }
})
	
  }

})

How to use Platform.select method:
.................................
import { StyleSheet, View, Text, Platform } from "react-native"

export default function App() {
    return <View style={styles.container}>
        <Text>Welcome</Text>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex:1,
        ...Platform.select({
            ios: {
                color: 'red',
                backgroundColor: 'yellow'

            },
            android: {
                color: 'green',
                backgroundColor: 'pink'
            },
            default: { color: 'black' }
        })
    }
})
.................................................................................
How to use Platform.select and PlatformColor function:
..................................................................................


import { StyleSheet, View, Text, Platform,PlatformColor } from "react-native"

export default function App() {
    return <View style={styles.container}>
        <Text>Welcome</Text>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex:1,
        ...Platform.select({
            ios: {
                color: PlatformColor('label'),
                backgroundColor:  PlatformColor('systemTealColor')

            },
            android: {
                color: PlatformColor('?android:attr/textColor'),
                backgroundColor: PlatformColor('@android:color/holo_blue_bright')
            },
            default: { color: 'black' }
        })
    }
})



.....................................................................................
			Height and width
.....................................................................................

How any ui element(graphical elements) are reprsented in computers?

Any element is represented as "Rectangle box".
if it is box which is some basic properites called "height and width".

Every element has default width and height.

Width of the element is width of the container element by default.
Container element is element which contains other elements
In browser we start with div as root container, in react native we use "View"

height of the element is height of the element itself by default.
....................................................................................

In Browser width and height is measured in the pixels or in %.
There are two ways you can give measures

=>fixed  -  50px
=>fluid - reponsive 50%

React Native and Fixed Dimensions:
..................................

=>The general way to set the dimensions of a component is by adding a fixed width and hight to style.
=>All dimensions in react native is unitless and represent density-independent pixels.
eg:
import { StyleSheet, Text, View } from 'react-native'

const Message = props => {
    return <>
        <Text style={styles.label}>{props.message}</Text>
        <Text style={{
            fontSize: 90,
            fontWeight: 'bold',
            fontFamily: "TGaramond",
            color: '#61dafb',
            borderWidth: 4
        }}>{props.message}</Text>

    </>
}

const App = () => {
    return <View>
        <Message message="Hello" />
    </View>

}
export default App;

//Style sheet Object 
const styles = StyleSheet.create({
    label: {
        fontSize: 90,
        fontWeight: 'bold',
        fontFamily: "TGaramond",
        color: '#61dafb',
        borderWidth: 4,
        width: 220
    }
})
...................................................................................

Percentage Dimensions:
 It is similar to responsive web design
=>The parent dimenstions are required to calulate % based width for child element.
=>The drawback of this measurements we need to take care of manual calculation.
  
import { View } from 'react-native'

const MyComponent = props => {
    return <View style={{ height: '100%', width: '100%', backgroundColor: 'yellow' }}>
        <View style={{ height: '15%', backgroundColor: 'red' }} />
        <View style={{ height: '35%', width: '66%', backgroundColor: 'skyblue' }} />
        <View style={{ height: '50%', width: '33%', backgroundColor: 'steelblue' }} />
    </View >
}


const App = () => {
    return <MyComponent />
}

export default App;










...................................................................................
			Layouts Design using Flex box
....................................................................................

CSS supports multiple layout methodology.

1.fixedwith layout.
   =>float,position properties are used to position elements on the screen.

2.Responsive web layouts
   =>the layout is adjusted based on the screen resolution and size using percentage      pattern

3.Grids layout
  =>The  layout is highly responsive but 
  =>CSS Grid Layout is a two-dimensional layout system for the web.
  =>It lets you lay content out in rows and columns. 

4.Flexbox layout
  Flexbox is a one-dimensional layout method for arranging items in rows or columns
  Items flex (expand) to fill additional space or shrink to fit into smaller spaces. 
..................................................................................
				Flex box layout
...................................................................................
React Native supports flex box layout.

Core Concepts of FlexBox:
........................
Axis:
  Flex box organizies the content either in main axis(x axis) or cross axis(y axis).

Main Axis:
.........
The main axis is the axis running in the direction the flex items are laid out in (for example, as a row across the page, or a column down the page.)
The start and end of this axis are called the main start and main end.

Cross axis:
...........
The cross axis is the axis running perpendicular to the direction the flex items are laid out in.
The start and end of this axis are called the cross start and cross end

Flex ITem:
.........
=>The items laid out as flexible boxes inside the flex container are called flex items

Flex Container:
...............
=>in order to start flex box layout we must have flex container.

Space Allocation:
.................
  Flex will define how your flex items are going to "fill" over the availble space along your main axis. 

How to activate the flex layout?
  Flex layout is activated inside every react element by default

flex:1 for Container:
....................
 Generally flex container will have value always 1. meaning that it calculates the screen width and height automatically.
  flex :1 in container means the whole width and height of the screen, let says my screen width is 120px and height is 150px then these values are automatically.

<View style={{flex:1}}>
  <View

</View>

Flex values and Flex Items:
.........
<View style={{ flex: 1 }}>
        {/* Flex items:children */}
        <View style={{flex:1,backgroundColor:'red'}} />
        <View style={{flex:2,backgroundColor:'yellow'}}/>
        <View style={{flex:3,backgroundColor:'blue'}} />
</View>

The total flex container space is "divided among child(flex items)"

Calculation

flex 1 + flex 2 + flex 3 =Total flex space 
1+2+3=6

box1 which takes 1/6
box2 which takes 2/6
box3 which takes 3/6

import { View } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={{ flex: 1 }}>
        {/* Flex items:children */}
        <View style={{flex:1,backgroundColor:'red'}} />
        <View style={{flex:2,backgroundColor:'yellow'}}/>
        <View style={{flex:3,backgroundColor:'blue'}} />
        </View>
}


const App = () => {
    return <MyComponent />
}

export default App;
...................................................................................
				Nested Containers
...................................................................................
import { View } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={{ flex: 1 }}>
        {/* Flex items:children */}
        <View style={{ flex: 1, backgroundColor: 'red' }} />
        <View style={{ flex: 2, backgroundColor: 'yellow' }} />
        <View style={{ flex: 3, backgroundColor: 'blue' }} />
        <View style={{ flex: 4, backgroundColor: 'green' }}>
            <View style={{ flex: 1, backgroundColor: 'white' }} />
            <View style={{ flex: 2, backgroundColor: 'yellow' }} />
        </View>
    </View>
}


const App = () => {
    return <MyComponent />
}

export default App;
..................................................................................
				Flex Direction
...................................................................................
flexDirection property controls the direction in which the children(flex items) are laid out within child element.

flex direction has values:

1.column:
     Align childrens top to bottom which is default.

2.row:
    Align childrens left to right

3.column-reverse:
    Align childrens from the bottom to top.

4.row-reverse:
   Align childrens right to left.


Column:
import { StyleSheet, View,Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>Flex Direction:Column</Text>
        <View style={styles.elementsContainer}>
            <View style={{width:50,height:50,backgroundColor:'red'}}/>
            <View style={{width:50,height:50,backgroundColor:'yellow'}}/>
            <View style={{width:50,height:50,backgroundColor:'green'}}/>
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color:'blue'
    },
    elementsContainer: {
        flex:1,
        backgroundColor:'black',
        marginLeft: 24,
        marginRight:24,
        flexDirection:'column',
        marginBottom:24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;

...

Row:
import { StyleSheet, View,Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>Flex Direction:Row</Text>
        <View style={styles.elementsContainer}>
            <View style={{width:50,height:50,backgroundColor:'red'}}/>
            <View style={{width:50,height:50,backgroundColor:'yellow'}}/>
            <View style={{width:50,height:50,backgroundColor:'green'}}/>
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color:'blue'
    },
    elementsContainer: {
        flex:1,
        backgroundColor:'black',
        marginLeft: 24,
        marginRight:24,
        flexDirection:'row',
        marginBottom:24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;
....................................................................................

Column Reverse:

import { StyleSheet, View,Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>Flex Direction:Column-Reverse</Text>
        <View style={styles.elementsContainer}>
            <View style={{width:50,height:50,backgroundColor:'red'}}/>
            <View style={{width:50,height:50,backgroundColor:'yellow'}}/>
            <View style={{width:50,height:50,backgroundColor:'green'}}/>
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color:'blue'
    },
    elementsContainer: {
        flex:1,
        backgroundColor:'black',
        marginLeft: 24,
        marginRight:24,
        flexDirection:'column-reverse',
        marginBottom:24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;
...................................................................................
Row Reverse:
...........
import { StyleSheet, View,Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>Flex Direction:RowReverse</Text>
        <View style={styles.elementsContainer}>
            <View style={{width:50,height:50,backgroundColor:'red'}}/>
            <View style={{width:50,height:50,backgroundColor:'yellow'}}/>
            <View style={{width:50,height:50,backgroundColor:'green'}}/>
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color:'blue'
    },
    elementsContainer: {
        flex:1,
        backgroundColor:'black',
        marginLeft: 24,
        marginRight:24,
        flexDirection:'row-reverse',
        marginBottom:24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;
....................................................................................
			Aligning Child elements(Flex Items)
....................................................................................

In order to align flex items within container we have properties

1.Justify content
2.Align items
3.Align self
4.Align Content
5.Flex wrap

Justify content:
 Align flex items within the main axis(x axis) of their container.

Flex Direction says that how to organize either row or column


justifyContent: 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around' | 'space-evenly'

flex-start; + flex direction: column

  The default value, align childern of a container to the start of the container's main axis.
import { StyleSheet, View,Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>justifyContent: :Column : flex-start</Text>
        <View style={styles.elementsContainer}>
            <View style={{width:50,height:50,backgroundColor:'red'}}/>
            <View style={{width:50,height:50,backgroundColor:'yellow'}}/>
            <View style={{width:50,height:50,backgroundColor:'green'}}/>
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color:'blue'
    },
    elementsContainer: {
        flex:1,
        backgroundColor:'black',
        marginLeft: 24,
        marginRight:24,
        flexDirection:'column',
        justifyContent: 'flex-start',
        marginBottom:24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;
................................................................................
justifyContent: 'flex-start', + flexDirection:'row':
.......................................................

import { StyleSheet, View,Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>justifyContent: :Column : flex-start</Text>
        <View style={styles.elementsContainer}>
            <View style={{width:50,height:50,backgroundColor:'red'}}/>
            <View style={{width:50,height:50,backgroundColor:'yellow'}}/>
            <View style={{width:50,height:50,backgroundColor:'green'}}/>
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color:'blue'
    },
    elementsContainer: {
        flex:1,
        backgroundColor:'black',
        marginLeft: 24,
        marginRight:24,
        flexDirection:'row',
        justifyContent: 'flex-start',
        marginBottom:24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;
...................................................................................


flex-end:
   Align childern of a container to the end of the container's main axis
 
flexDirection:'column'+ justifyContent: 'flex-end',
  
import { StyleSheet, View,Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>justifyContent: :Column : flex-start</Text>
        <View style={styles.elementsContainer}>
            <View style={{width:50,height:50,backgroundColor:'red'}}/>
            <View style={{width:50,height:50,backgroundColor:'yellow'}}/>
            <View style={{width:50,height:50,backgroundColor:'green'}}/>
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color:'blue'
    },
    elementsContainer: {
        flex:1,
        backgroundColor:'black',
        marginLeft: 24,
        marginRight:24,
        flexDirection:'column',
        justifyContent: 'flex-end',
        marginBottom:24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;


flexDirection:'row'+ justifyContent: 'flex-end',

import { StyleSheet, View,Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>justifyContent: :Column : flex-start</Text>
        <View style={styles.elementsContainer}>
            <View style={{width:50,height:50,backgroundColor:'red'}}/>
            <View style={{width:50,height:50,backgroundColor:'yellow'}}/>
            <View style={{width:50,height:50,backgroundColor:'green'}}/>
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color:'blue'
    },
    elementsContainer: {
        flex:1,
        backgroundColor:'black',
        marginLeft: 24,
        marginRight:24,
        // flexDirection:'column',
        flexDirection:'row',
        justifyContent: 'flex-end',
        marginBottom:24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;
.....................................................................................

center:
......
   Align childern of a container in the center of the container's main axis.

flexDirection:'column',+  justifyContent: 'center',

import { StyleSheet, View,Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>justifyContent: :Column : flex-start</Text>
        <View style={styles.elementsContainer}>
            <View style={{width:50,height:50,backgroundColor:'red'}}/>
            <View style={{width:50,height:50,backgroundColor:'yellow'}}/>
            <View style={{width:50,height:50,backgroundColor:'green'}}/>
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color:'blue'
    },
    elementsContainer: {
        flex:1,
        backgroundColor:'black',
        marginLeft: 24,
        marginRight:24,
        flexDirection:'column',
        // flexDirection:'row',
        justifyContent: 'center',
        marginBottom:24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;
.............

Justify-Content: space between
.............................
Allocate space between items based on containers x'axis



import { StyleSheet, View,Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>justifyContent: :Space-between</Text>
        <View style={styles.elementsContainer}>
            <View style={{width:50,height:50,backgroundColor:'red'}}/>
            <View style={{width:50,height:50,backgroundColor:'yellow'}}/>
            <View style={{width:50,height:50,backgroundColor:'green'}}/>
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color:'blue'
    },
    elementsContainer: {
        flex:1,
        backgroundColor:'black',
        marginLeft: 24,
        marginRight:24,
        flexDirection:'row',
        justifyContent: 'space-between',
        marginBottom:24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;
...................................
justify content: space-around:
.............................

Allocate space around the items based on x axis
//justifyContent: space-between

import { StyleSheet, View, Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>justifyContent: :Space-between</Text>
        <View style={styles.elementsContainer}>
            <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color: 'blue'
    },
    elementsContainer: {
        flex: 1,
        backgroundColor: 'black',
        marginLeft: 24,
        marginRight: 24,
        flexDirection: 'column',
        //  justifyContent: 'space-between',
        justifyContent: 'space-around',
        marginBottom: 24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;
.....................

space-evenly:
............
Evenly distribute space for children the alignment container along the main axis.

space-evenly= space-between + space-around
..

//justifyContent: space-between

import { StyleSheet, View, Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>justifyContent: :Space-between</Text>
        <View style={styles.elementsContainer}>
            <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color: 'blue'
    },
    elementsContainer: {
        flex: 1,
        backgroundColor: 'black',
        marginLeft: 24,
        marginRight: 24,
        flexDirection: 'column',
        //  justifyContent: 'space-between',
        //justifyContent: 'space-around',
        justifyContent:'space-evenly',
        marginBottom: 24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;
.....................................................................................
				Align items
....................................................................................

Align items going to allocate space based "Y/Cross " axis.

Justify Content always X axis where AlignItems y axis.


AlignItems: 'stretch' | 'flex-start',|'flex-end' | 'center'| 'baseline'

eg:

Flex-start:

import { View, StyleSheet } from 'react-native'

const MyComponent = props => {
    return <View style={styles.container}>
        {/* i want to use existing style + extra style */}
        <View style={[styles.box, { backgroundColor: 'blue' }]} />
        <View style={[styles.box, { backgroundColor: 'skyblue' }]} />
        <View style={[styles.box, { backgroundColor: 'steelblue', width: 'auto', minWidth: 50 }]} />
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        marginTop: 1,
        backgroundColor: 'aliceblue',
        minHeight: 200,
        flexDirection:'column',
        alignItems:'flex-start',

    },
    box: {
        height: 50,
        width: 50
    }
})

const App = () => {
    return <MyComponent />
}
export default App;
.............

Flex-end:
import { View, StyleSheet } from 'react-native'

const MyComponent = props => {
    return <View style={styles.container}>
        {/* i want to use existing style + extra style */}
        <View style={[styles.box, { backgroundColor: 'blue' }]} />
        <View style={[styles.box, { backgroundColor: 'skyblue' }]} />
        <View style={[styles.box, { backgroundColor: 'steelblue', width: 'auto', minWidth: 50 }]} />
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        marginTop: 1,
        backgroundColor: 'aliceblue',
        minHeight: 200,
        flexDirection:'column',
        alignItems:'flex-end',

    },
    box: {
        height: 50,
        width: 50
    }
})

const App = () => {
    return <MyComponent />
}
export default App;

...
center
.....
alignItems:'center',
import { View, StyleSheet } from 'react-native'

const MyComponent = props => {
    return <View style={styles.container}>
        {/* i want to use existing style + extra style */}
        <View style={[styles.box, { backgroundColor: 'blue' }]} />
        <View style={[styles.box, { backgroundColor: 'skyblue' }]} />
        <View style={[styles.box, { backgroundColor: 'steelblue', width: 'auto', minWidth: 50 }]} />
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        marginTop: 1,
        backgroundColor: 'aliceblue',
        minHeight: 200,
        flexDirection:'column',
        //alignItems:'flex-end',
        alignItems:'center',

    },
    box: {
        height: 50,
        width: 50
    }
})

const App = () => {
    return <MyComponent />
}
export default App;
.....
base line:
import { View, StyleSheet } from 'react-native'

const MyComponent = props => {
    return <View style={styles.container}>
        {/* i want to use existing style + extra style */}
        <View style={[styles.box, { backgroundColor: 'blue' }]} />
        <View style={[styles.box, { backgroundColor: 'skyblue' }]} />
        <View style={[styles.box, { backgroundColor: 'steelblue', width: 'auto', minWidth: 50 }]} />
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        marginTop: 1,
        backgroundColor: 'aliceblue',
        minHeight: 200,
        flexDirection:'column',
        //alignItems:'flex-end',
        alignItems:'baseline',

    },
    box: {
        height: 50,
        width: 50
    }
})

const App = () => {
    return <MyComponent />
}
export default App;
......................................................................................
stretch:
  To stretch children of a container to match "height" of the container's cross axis.
 
import { View, StyleSheet } from 'react-native'

const MyComponent = props => {
    return <View style={styles.container}>
        {/* i want to use existing style + extra style */}
        <View style={[styles.box, { backgroundColor: 'blue' }]} />
        <View style={[styles.box, { backgroundColor: 'skyblue' }]} />
        <View style={[styles.box, { backgroundColor: 'steelblue', width: 'auto', minWidth: 50 }]} />
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        marginTop: 1,
        backgroundColor: 'aliceblue',
        minHeight: 200,
        flexDirection:'column',
        //alignItems:'flex-end',
        alignItems:'stretch',

    },
    box: {
        height: 50,
        width: 50
    }
})

const App = () => {
    return <MyComponent />
}
export default App;

