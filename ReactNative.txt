                                           React Native
..............................................................................................

What is React Native?

1.React Native is js lib for building native mobile apps 
2.React Native combines the best parts of native development with React, a best-in-class  JavaScript library for building user interfaces.

Mobile App development:

 Mobile apps are built using mobile platforms and os.

Mobile platforms:
1.Android
2.Ios

Mobile devices are acting front end devices, user interfaces communicates back end services.

Dev:
 1.user interface developer/front end developer
 2.back end developer
 3.full stack developer.

Front end developer who dev apps for  front devices.

Devices:
 1.computers - desktop
 2.Hand held devices- Mobiles,Tabs..
 3.TV,Game consoles
 4.IOT devices- It could be any - watches,car,industrial apps,

Dev generally build apps for desktops:
  Standalone desktop apps
  Browser based apps- javascript,html,css - react,angular,vue.....

Mobile /Tab apps:
 Dev builds apps for android platform using java , kotlin pl.
 in iOS development, you use Swift or Objective-C.

Types of mobile Apps:
.....................

1.Native Mobile
2.Web apps
3.Hybrid apps

1.Native Mobile
   Mobile apps are built by using native platform languages- java / Swift.
2.Web apps
   Apps built for browsers -Mobile browsers
3.Hybrid  apps
   built apps using javascript but it wont run inside browser, runs inside mobile using container(WebView).


Hybrid apps:

 Application built using javascript,css,html,looks like native apps.

Why Hybrid Apps?

-incase native apps, we need to maintain two code base for both platform.

Why not to build one single portable app for all platforms?

 That is birth of hybrid apps.

Hybrids apps can be built using existing web tech- js,css,html.
Js is simple dom language, how to acess platform services such as contacts,networks,storage..
- a lib was created -cordova , based on cordova adobe started building a framework on top of the cordova , called phoneGap.

...........................................................................................

How to build mobile native apps in portable way using same javascript technology without html and css?

That is birth of React Native.

/////////////////////////////////////////////////////////////////////////////////////////////

React Native Architecture :
...........................

React native applications are written using react(js) core principles
 -Component
 -Props
 -State
 -Event Handling

Every react native apps are simple javascript code.

In React Native, there is no webview concept. React native never run inside browser.

Types of React Native code:

React Native code consist of Two things:
.......................................

1.UI MARK UP Code
   -  incase of react , html is mark up

UI Mark Up code for React native:

React native does not use html language to build ui elements.
React Native provides a high level ui components already written, so we can use those
components only.Why?
 We are building portable application either for android or ios.
So we need generic concept for both  platforms. 
For that React native provides a generic components for both platforms.

Compilation:

What is it? What is happening during compilation?

Source code is converted into another source code - Compilation.
Another code is platform specific code. android code or ios code.
if i wirte ui components, ui components will be converted to platform spefic components.
javascript code will be emitted as it is-app code.



2.Application logic code
   - js code - apis,state,props......


1.Source Code
    written in react - UI Code and app logic

2.Compiled code
    code converted into platform specific code.

////////////////////////////////////////////////////////////////////////////////////////////

How react native apps are executed?  Execution Model:
.....................................................

All views are executed by platform runtimes eg: android by art.
All javascript is executed by Hermes Js engine.
https://hermesengine.dev/
//////////////////////////////////////////////////////////////////////////////////////////////

How to build react native apps?


React native apps can be built using two work flows.


1.Native Work flow

 If you are already familiar with mobile development, you may want to use React Native CLI.
 It requires Xcode or Android Studio to get started. If you already have one of these tools installed, you should be able to get up and running within a few minutes. If they are not installed, you should expect to spend about an hour installing and configuring them.

2.Expo Work Flow.
  If you are new to mobile development, the easiest way to get started is with Expo CLI. Expo is a set of tools built around React Native and, while it has many features, the most relevant feature for us right now is that it can get you writing a React Native app within minutes


/////////////////////////////////////////////////////////////////////////////////////////////

Native work flow:
 
if you want to build professional mobile app you need lot of infrastructure.
 UI Components
    -Views,Text,Labels,ListViews,ScrollView,TabView...........

React native core team provides all core components necessary to build mobile apps.

What if i want more components which is not supported by react core team.

YOu need to look at community or companies who provides professional mobile apps.

-Community -https://reactnative.directory/


Expo Work flow:
...............
What is expo?

 Expo is a framework and a platform for universal React applications. It is a set of tools and services built around React Native and native platforms that help you develop, build, deploy, and quickly iterate on iOS, Android, and web apps from the same JavaScript/TypeScript codebase.
//////////////////////////////////////////////////////////////////////////////////////////////

Setup :

Expo work flow Setup
....................

1.install expo-cli

npm install -g expo-cli

2.Create project

expo init AwesomeProject
cd AwesomeProject
npm start # you can also use: expo start

Expo apps can be created in two ways


Managed Work flow:

  With the managed workflow you only write JavaScript / TypeScript and Expo tools and services take care of everything else for you.

  The managed workflow is kind of like Rails and Create React App, but for React Native.

Apps are built with the managed workflow using the expo-cli, the Expo Go app on your mobile device, and our various services: push notifications, the build service, and over-the-air (OTA) updates. 

Expo tries to manage as much of the complexity of building apps for you as we can, which is why we call it the managed workflow.

 A developer using the managed workflow doesn't use Xcode or Android Studio, they just write JavaScript code and manage configuration for things like the app icon and splash screen through app.json.

 The Expo SDK exposes an increasingly comprehensive set of APIs that give you the power to access device capabilities like the camera, biometric authentication, file system, haptics, and so on.

Bare Work flow:

  In the bare workflow you have full control over every aspect of the native project, and Expo tools and services are a little more limited.

In the bare workflow the developer has complete control, along with the complexity that comes with that. You can use most APIs in the Expo SDK, but the build service and easy Configuration with app.json / app.config.js are not yet supported.

Running your React Native application in case of expo work flow:
.................................................................

1.You can run and test app inside browser itself- this is not recommended for complex apps.

2.You can run inside your device directly.
  Expo offers called expo client.
3.You can use emulators -Andorid virtual devices or emulators.

Metro Bundler:
-Online compiler, compiles code into react native 
////////////////////////////////////////////////////////////////////////////////////////////


Create Native Project: Using native work flow:
..............................................

Steps:
......

1.npm install react-native-cli -g

2.Create Project
 react-native init AwesomeNativeProject

3.Running Project
 Run instructions for Android:
    • Have an Android emulator running (quickest way to get started), or a device connected.
    • cd "C:\session\ibm\2021\march\reactnative\AwesomeNativeProject" && npx react-native run-android

Android Builder:
info Running jetifier to migrate libraries to AndroidX. You can disable it using "--no-jetifier" flag.
Jetifier found 903 file(s) to forward-jetify. Using 12 workers...
info Starting JS server...
* daemon not running; starting now at tcp:5037
* daemon started successfully
info Launching emulator...
info Successfully launched emulator.
info Installing the app...
Downloading https://services.gradle.org/distributions/gradle-6.7-all.zip
.............10%..............20%..............30%..............40%..............50%..............60%..............70%..............80%..............90%..............100%

Welcome to Gradle 6.7!

Here are the highlights of this release:
 - File system watching is ready for production use
 - Declare the version of Java your build requires
 - Java 15 support

For more details see https://docs.gradle.org/6.7/release-notes.html

Starting a Gradle Daemon (subsequent builds will be faster)
File C:\Users\sasub\.android\repositories.cfg could not be loaded.
Checking the license for package Android SDK Build-Tools 29.0.2 in C:\Users\sasub\AppData\Local\Android\Sdk\licenses
License for package Android SDK Build-Tools 29.0.2 accepted.
Preparing "Install Android SDK Build-Tools 29.0.2 (revision: 29.0.2)".
"Install Android SDK Build-Tools 29.0.2 (revision: 29.0.2)" ready.
Installing Android SDK Build-Tools 29.0.2 in C:\Users\sasub\AppData\Local\Android\Sdk\build-tools\29.0.2
"Install Android SDK Build-Tools 29.0.2 (revision: 29.0.2)" complete.
"Install Android SDK Build-Tools 29.0.2 (revision: 29.0.2)" finished.

> Task :app:compileDebugJavaWithJavac

> Task :app:stripDebugDebugSymbols
Unable to strip the following libraries, packaging them as they are: libc++_shared.so, libevent-2.1.so, libevent_core-2.1.so, libevent_extra-2.1.so, libfb.so, libfbjni.so, libflipper.so, libfolly_futures.so, libfolly_json.so, libglog.so, libglog_init.so, libhermes-executor-common-debug.so, libhermes-executor-common-release.so, libhermes-executor-debug.so, libhermes-executor-release.so, libhermes-inspector.so, libimagepipeline.so, libjsc.so, libjscexecutor.so, libjsijniprofiler.so, libjsinspector.so, libnative-filters.so, libnative-imagetranscoder.so, libreact_codegen_reactandroidspec.so, libreact_nativemodule_core.so, libreactnativeblob.so, libreactnativejni.so, libreactnativeutilsjni.so, libreactperfloggerjni.so, libturbomodulejsijni.so, libyoga.so.

> Task :app:installDebug
Installing APK 'app-debug.apk' on 'Nexus_6_API_29(AVD) - 10' for app:debug
Installed on 1 device.

BUILD SUCCESSFUL in 5m 10s
29 actionable tasks: 29 executed
info Connecting to the development server...
8081
info Starting the app on "emulator-5554"...
Starting: Intent { cmp=com.awesomenativeproject/.MainActivity }
////////////////////////////////////////////////////////////////////////////////////////////

Entry point For react native application? How to mount react native apps?

import {AppRegistry} from 'react-native';
import App from './App';
import {name as appName} from './app.json';

AppRegistry.registerComponent(appName, () => App);
/////////////////////////////////////////////////////////////////////////////////////////////

React Native Application Architecture:
......................................

React Native apps are collection of components(From react native core,third party components,expo components).

Basic template :

import React from 'react'

Components:
...........
Text,View,Image,TextInput,StyleSheet,ScrollView

1.Text --- <p>

import React from 'react';
import {Text} from 'react-native';


export default function App(){
    return <Text>Hello!</Text>
}

2.View 

 The most fundamental component for building a UI, View is a container that supports layout with flexbox, style, some touch handling, and accessibility controls. 
View maps directly to the native view equivalent on whatever platform React Native is running on, whether that is a UIView, <div>, android.view, etc.

import React from 'react';
import { Text, View } from 'react-native';


export default function App() {
    return <View>
            <Text>Hello View!</Text>
    </View>
}

Any thing will be rendered from left most corner, how to align.
....................................................................................
eg:
import { Greeter } from "./Greeter/Greeter";

function App(){
     return <>
         <Greeter name={"Subramanian"} message={"Hello"} />
     </>
}
export default App;

Greeter/Greeter.jsx
import { Text, View } from "react-native";

export const Greeter = props => {
    const { name, message } = props;
    return <View>
        <Text>{message} {name}</Text>
    </View>
}
//Default Props
Greeter.defaultProps = {
    name: 'Name',
    message: 'Welcome'
}
....................................................................................

Assignment:
  Create Blogs in the React Native which already we have done in the React web.

Styles:
.......

In react Styles are added through css, react native does not css because no html is used.

React Native does not allow css directly. Java script has api to add styles via code.

eg.
in html

document.getElementById('myid').styles.add.backgroundColor='red'

React Native uses javascript api to add styles to any UI Element.

Style is Object, which contains properties

 element.style.property

StyleSheet
   A StyleSheet is an abstraction similar to CSS StyleSheets

StyleSheet object has method called "create" mehtod


StyleSheet.create({
 styleProperty: propvalue,
 stylePropery:{
    styleProp:propValue
 }
});

Refer :https://www.w3schools.com/jsref/dom_obj_style.asp

eg:

import React from 'react';
import { Text, View, StyleSheet } from 'react-native';

export const { container, text } = StyleSheet.create({
    container: {
        flex: 1,
        padding: 24,
        backgroundColor: "#eaeaea"
    },
    text: {
        color: "blue",
        textAlign: "center",
        fontSize: 30
    }
});

export default function App() {
    return <View style={container}>
        <Text style={text}>Hello View!</Text>
        {/**in line style */}
        <Text style={{
            color: "red",
            textAlign: "center",
            fontSize: 30
        }}>Hello View!</Text>

    </View>
}

// export default function App() {
//     return <View style={appStyles.container}>
//         <Text style={appStyles.text}>Hello View!</Text>
//         {/**in line style */}
//         <Text style={{
//             color: "red",
//             textAlign: "center",
//             fontSize: 30
//         }}>Hello View!</Text>

//     </View>
// }
// const appStyles = StyleSheet.create({
//     container: {
//         flex: 1,
//         padding: 24,
//         backgroundColor: "#eaeaea"
//     },
//     text: {
//         color: "#20232a",
//         textAlign: "center",
//         fontSize: 30
//     }
// });

//////////////////////////////////////////////////////////////////////////////////////////////

State:
import { useState } from "react"
import { View, Text, Button } from 'react-native'

export const Counter = props => {
    const [value, setValue] = useState(0)
    const onIncrement = () => {
         setValue(value + 1)
    }
    return <View>
        <Text>Counter App</Text>
        <Text>Value {value}</Text>
        <Button
          title="Increment"
          onPress={onIncrement}
        />
    </View>
}

App.js

import { Counter } from "./src/Counter/counter";
import { View,StyleSheet } from "react-native";

function App() {
     return <View  style={styles.container}>
          <Counter />
     </View>
}
export default App;


const styles = StyleSheet.create({
     container: {
          flex: 1,
          fontWeight:'bold',
          backgroundColor: 'pink',
          alignItems: 'center',
          justifyContent: 'center',
     },
});
.....................................................................................

export default App;





....................................................................................
				Styling
...................................................................................
In react styles are added through css, react native does not have css language because no html is used.

React Native does not allow css directly.
We are going to use "javascript style apis"
Javascript has api to add styles via code.

You must have knowledge to identify the css "js" properties.


In html how to apply style via js:

document.getElementById(id).style.property = new style
element.style.propery =value

https://www.w3schools.com/jsref/dom_obj_style.asp

React Native uses a Object to add styles.
 =>StyleSheet

StyleSheet:
 It is  abstraction to css.

import { StyleSheet, Text, View } from 'react-native'

const Message = props => {
    return <Text style={styles.label}>{props.message}</Text>
}

const App = () => {
    return <View>
        <Message message="Hello" />
    </View>

}
export default App;

//Style sheet Object 
const styles = StyleSheet.create({
    label: {
        fontSize: 90,
        fontWeight:'bold',
        fontFamily: "TGaramond",
        color:'#61dafb',
        borderWidth:4
    }
})


<div style={{backgroundColor:'red'}} />

Syntax:

 const styles = StyleSheet.create({
  styleProperty:PropValue,
  styleProperty: {
      prop1:value1,
      prop2:value2,
      prop3:value3
   
  }
 })

How to declare inline style?

   <Text style={{
            fontSize: 90,
            fontWeight: 'bold',
            fontFamily: "TGaramond",
            color: '#61dafb',
            borderWidth: 4
        }}>{props.message}</Text>

How to use colors?

 -color names; red blue; which is not mostly recommended.
 -color values ; #

Color apis:

PlatformColor
   Lets your reference the Platform's color

DynamiColorIOS 
   It is IOS specific and allows you to specify which colors should be used in light and dark Mode.

PlatformColor(color1, [color2, ...colorN]);

 You can use the PlatformColor function to access native colors on the target platform by supplying the native color’s corresponding string value

If you pass more than one string value to the PlatformColor function, it will treat the first value as the default and the rest as fallback.

PlatformColor('bogusName', 'linkColor');

Supported colors:
For a full list of the types of system colors supported.

Android:
R.attr - ?attr prefix

R.color - @android:color prefix


iOS (Objective-C and Swift notations):

UIColor Standard Colors
UIColor UI Element Colors

select method how works?
 select internally applies if logic to select os

Platform.OS === 'platform' or a Platform.select()

if(Platform.OS==='android'){
  apply logic for android
}else{ 
  apply logic for ios
}

Platform.select({
  android:{
    
  },
  ios:{
    
  },
  default:{

 }
})

StyleSheet.create({
  container: {
  width:100,

  ...Platform.select({
  android:{
    backgroundColor:'green'
  },
  ios:{
     backgroundColor:'yellow'
  },
  },
  default:{
     backgroundColor:'gray'
  }
})
	
  }

})

How to use Platform.select method:
.................................
import { StyleSheet, View, Text, Platform } from "react-native"

export default function App() {
    return <View style={styles.container}>
        <Text>Welcome</Text>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex:1,
        ...Platform.select({
            ios: {
                color: 'red',
                backgroundColor: 'yellow'

            },
            android: {
                color: 'green',
                backgroundColor: 'pink'
            },
            default: { color: 'black' }
        })
    }
})
.................................................................................
How to use Platform.select and PlatformColor function:
..................................................................................


import { StyleSheet, View, Text, Platform,PlatformColor } from "react-native"

export default function App() {
    return <View style={styles.container}>
        <Text>Welcome</Text>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex:1,
        ...Platform.select({
            ios: {
                color: PlatformColor('label'),
                backgroundColor:  PlatformColor('systemTealColor')

            },
            android: {
                color: PlatformColor('?android:attr/textColor'),
                backgroundColor: PlatformColor('@android:color/holo_blue_bright')
            },
            default: { color: 'black' }
        })
    }
})



.....................................................................................
			Height and width
.....................................................................................

How any ui element(graphical elements) are reprsented in computers?

Any element is represented as "Rectangle box".
if it is box which is some basic properites called "height and width".

Every element has default width and height.

Width of the element is width of the container element by default.
Container element is element which contains other elements
In browser we start with div as root container, in react native we use "View"

height of the element is height of the element itself by default.
....................................................................................

In Browser width and height is measured in the pixels or in %.
There are two ways you can give measures

=>fixed  -  50px
=>fluid - reponsive 50%

React Native and Fixed Dimensions:
..................................

=>The general way to set the dimensions of a component is by adding a fixed width and hight to style.
=>All dimensions in react native is unitless and represent density-independent pixels.
eg:
import { StyleSheet, Text, View } from 'react-native'

const Message = props => {
    return <>
        <Text style={styles.label}>{props.message}</Text>
        <Text style={{
            fontSize: 90,
            fontWeight: 'bold',
            fontFamily: "TGaramond",
            color: '#61dafb',
            borderWidth: 4
        }}>{props.message}</Text>

    </>
}

const App = () => {
    return <View>
        <Message message="Hello" />
    </View>

}
export default App;

//Style sheet Object 
const styles = StyleSheet.create({
    label: {
        fontSize: 90,
        fontWeight: 'bold',
        fontFamily: "TGaramond",
        color: '#61dafb',
        borderWidth: 4,
        width: 220
    }
})
...................................................................................

Percentage Dimensions:
 It is similar to responsive web design
=>The parent dimenstions are required to calulate % based width for child element.
=>The drawback of this measurements we need to take care of manual calculation.
  
import { View } from 'react-native'

const MyComponent = props => {
    return <View style={{ height: '100%', width: '100%', backgroundColor: 'yellow' }}>
        <View style={{ height: '15%', backgroundColor: 'red' }} />
        <View style={{ height: '35%', width: '66%', backgroundColor: 'skyblue' }} />
        <View style={{ height: '50%', width: '33%', backgroundColor: 'steelblue' }} />
    </View >
}


const App = () => {
    return <MyComponent />
}

export default App;

...................................................................................
			Layouts Design using Flex box
....................................................................................

CSS supports multiple layout methodology.

1.fixedwith layout.
   =>float,position properties are used to position elements on the screen.

2.Responsive web layouts
   =>the layout is adjusted based on the screen resolution and size using percentage      pattern

3.Grids layout
  =>The  layout is highly responsive but 
  =>CSS Grid Layout is a two-dimensional layout system for the web.
  =>It lets you lay content out in rows and columns. 

4.Flexbox layout
  Flexbox is a one-dimensional layout method for arranging items in rows or columns
  Items flex (expand) to fill additional space or shrink to fit into smaller spaces. 
..................................................................................
				Flex box layout
...................................................................................
React Native supports flex box layout.

Core Concepts of FlexBox:
........................
Axis:
  Flex box organizies the content either in main axis(x axis) or cross axis(y axis).

Main Axis:
.........
The main axis is the axis running in the direction the flex items are laid out in (for example, as a row across the page, or a column down the page.)
The start and end of this axis are called the main start and main end.

Cross axis:
...........
The cross axis is the axis running perpendicular to the direction the flex items are laid out in.
The start and end of this axis are called the cross start and cross end

Flex ITem:
.........
=>The items laid out as flexible boxes inside the flex container are called flex items

Flex Container:
...............
=>in order to start flex box layout we must have flex container.

Space Allocation:
.................
  Flex will define how your flex items are going to "fill" over the availble space along your main axis. 

How to activate the flex layout?
  Flex layout is activated inside every react element by default

flex:1 for Container:
....................
 Generally flex container will have value always 1. meaning that it calculates the screen width and height automatically.
  flex :1 in container means the whole width and height of the screen, let says my screen width is 120px and height is 150px then these values are automatically.

<View style={{flex:1}}>
  <View/>

</View>

Flex values and Flex Items:
.........
<View style={{ flex: 1 }}>
        {/* Flex items:children */}
        <View style={{flex:1,backgroundColor:'red'}} />
        <View style={{flex:2,backgroundColor:'yellow'}}/>
        <View style={{flex:3,backgroundColor:'blue'}} />
</View>

The total flex container space is "divided among child(flex items)"

Calculation

flex 1 + flex 2 + flex 3 =Total flex space 
1+2+3=6

box1 which takes 1/6
box2 which takes 2/6
box3 which takes 3/6

import { View } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={{ flex: 1 }}>
        {/* Flex items:children */}
        <View style={{flex:1,backgroundColor:'red'}} />
        <View style={{flex:2,backgroundColor:'yellow'}}/>
        <View style={{flex:3,backgroundColor:'blue'}} />
        </View>
}


const App = () => {
    return <MyComponent />
}

export default App;
...................................................................................
				Nested Containers
...................................................................................
import { View } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={{ flex: 1 }}>
        {/* Flex items:children */}
        <View style={{ flex: 1, backgroundColor: 'red' }} />
        <View style={{ flex: 2, backgroundColor: 'yellow' }} />
        <View style={{ flex: 3, backgroundColor: 'blue' }} />
        <View style={{ flex: 4, backgroundColor: 'green' }}>
            <View style={{ flex: 1, backgroundColor: 'white' }} />
            <View style={{ flex: 2, backgroundColor: 'yellow' }} />
        </View>
    </View>
}


const App = () => {
    return <MyComponent />
}

export default App;
..................................................................................
				Flex Direction
...................................................................................
flexDirection property controls the direction in which the children(flex items) are laid out within child element.

flex direction has values:

1.column:
     Align childrens top to bottom which is default.

2.row:
    Align childrens left to right

3.column-reverse:
    Align childrens from the bottom to top.

4.row-reverse:
   Align childrens right to left.


Column:
import { StyleSheet, View,Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>Flex Direction:Column</Text>
        <View style={styles.elementsContainer}>
            <View style={{width:50,height:50,backgroundColor:'red'}}/>
            <View style={{width:50,height:50,backgroundColor:'yellow'}}/>
            <View style={{width:50,height:50,backgroundColor:'green'}}/>
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color:'blue'
    },
    elementsContainer: {
        flex:1,
        backgroundColor:'black',
        marginLeft: 24,
        marginRight:24,
        flexDirection:'column',
        marginBottom:24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;

...

Row:
import { StyleSheet, View,Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>Flex Direction:Row</Text>
        <View style={styles.elementsContainer}>
            <View style={{width:50,height:50,backgroundColor:'red'}}/>
            <View style={{width:50,height:50,backgroundColor:'yellow'}}/>
            <View style={{width:50,height:50,backgroundColor:'green'}}/>
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color:'blue'
    },
    elementsContainer: {
        flex:1,
        backgroundColor:'black',
        marginLeft: 24,
        marginRight:24,
        flexDirection:'row',
        marginBottom:24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;
....................................................................................

Column Reverse:

import { StyleSheet, View,Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>Flex Direction:Column-Reverse</Text>
        <View style={styles.elementsContainer}>
            <View style={{width:50,height:50,backgroundColor:'red'}}/>
            <View style={{width:50,height:50,backgroundColor:'yellow'}}/>
            <View style={{width:50,height:50,backgroundColor:'green'}}/>
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color:'blue'
    },
    elementsContainer: {
        flex:1,
        backgroundColor:'black',
        marginLeft: 24,
        marginRight:24,
        flexDirection:'column-reverse',
        marginBottom:24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;
...................................................................................
Row Reverse:
...........
import { StyleSheet, View,Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>Flex Direction:RowReverse</Text>
        <View style={styles.elementsContainer}>
            <View style={{width:50,height:50,backgroundColor:'red'}}/>
            <View style={{width:50,height:50,backgroundColor:'yellow'}}/>
            <View style={{width:50,height:50,backgroundColor:'green'}}/>
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color:'blue'
    },
    elementsContainer: {
        flex:1,
        backgroundColor:'black',
        marginLeft: 24,
        marginRight:24,
        flexDirection:'row-reverse',
        marginBottom:24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;
....................................................................................
			Aligning Child elements(Flex Items)
....................................................................................

In order to align flex items within container we have properties

1.Justify content
2.Align items
3.Align self
4.Align Content
5.Flex wrap

Justify content:
 Align flex items within the main axis(x axis) of their container.

Flex Direction says that how to organize either row or column


justifyContent: 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around' | 'space-evenly'

flex-start; + flex direction: column

  The default value, align childern of a container to the start of the container's main axis.
import { StyleSheet, View,Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>justifyContent: :Column : flex-start</Text>
        <View style={styles.elementsContainer}>
            <View style={{width:50,height:50,backgroundColor:'red'}}/>
            <View style={{width:50,height:50,backgroundColor:'yellow'}}/>
            <View style={{width:50,height:50,backgroundColor:'green'}}/>
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color:'blue'
    },
    elementsContainer: {
        flex:1,
        backgroundColor:'black',
        marginLeft: 24,
        marginRight:24,
        flexDirection:'column',
        justifyContent: 'flex-start',
        marginBottom:24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;
................................................................................
justifyContent: 'flex-start', + flexDirection:'row':
.......................................................

import { StyleSheet, View,Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>justifyContent: :Column : flex-start</Text>
        <View style={styles.elementsContainer}>
            <View style={{width:50,height:50,backgroundColor:'red'}}/>
            <View style={{width:50,height:50,backgroundColor:'yellow'}}/>
            <View style={{width:50,height:50,backgroundColor:'green'}}/>
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color:'blue'
    },
    elementsContainer: {
        flex:1,
        backgroundColor:'black',
        marginLeft: 24,
        marginRight:24,
        flexDirection:'row',
        justifyContent: 'flex-start',
        marginBottom:24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;
...................................................................................


flex-end:
   Align childern of a container to the end of the container's main axis
 
flexDirection:'column'+ justifyContent: 'flex-end',
  
import { StyleSheet, View,Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>justifyContent: :Column : flex-start</Text>
        <View style={styles.elementsContainer}>
            <View style={{width:50,height:50,backgroundColor:'red'}}/>
            <View style={{width:50,height:50,backgroundColor:'yellow'}}/>
            <View style={{width:50,height:50,backgroundColor:'green'}}/>
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color:'blue'
    },
    elementsContainer: {
        flex:1,
        backgroundColor:'black',
        marginLeft: 24,
        marginRight:24,
        flexDirection:'column',
        justifyContent: 'flex-end',
        marginBottom:24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;


flexDirection:'row'+ justifyContent: 'flex-end',

import { StyleSheet, View,Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>justifyContent: :Column : flex-start</Text>
        <View style={styles.elementsContainer}>
            <View style={{width:50,height:50,backgroundColor:'red'}}/>
            <View style={{width:50,height:50,backgroundColor:'yellow'}}/>
            <View style={{width:50,height:50,backgroundColor:'green'}}/>
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color:'blue'
    },
    elementsContainer: {
        flex:1,
        backgroundColor:'black',
        marginLeft: 24,
        marginRight:24,
        // flexDirection:'column',
        flexDirection:'row',
        justifyContent: 'flex-end',
        marginBottom:24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;
.....................................................................................

center:
......
   Align childern of a container in the center of the container's main axis.

flexDirection:'column',+  justifyContent: 'center',

import { StyleSheet, View,Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>justifyContent: :Column : flex-start</Text>
        <View style={styles.elementsContainer}>
            <View style={{width:50,height:50,backgroundColor:'red'}}/>
            <View style={{width:50,height:50,backgroundColor:'yellow'}}/>
            <View style={{width:50,height:50,backgroundColor:'green'}}/>
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color:'blue'
    },
    elementsContainer: {
        flex:1,
        backgroundColor:'black',
        marginLeft: 24,
        marginRight:24,
        flexDirection:'column',
        // flexDirection:'row',
        justifyContent: 'center',
        marginBottom:24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;
.............

Justify-Content: space between
.............................
Allocate space between items based on containers x'axis



import { StyleSheet, View,Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>justifyContent: :Space-between</Text>
        <View style={styles.elementsContainer}>
            <View style={{width:50,height:50,backgroundColor:'red'}}/>
            <View style={{width:50,height:50,backgroundColor:'yellow'}}/>
            <View style={{width:50,height:50,backgroundColor:'green'}}/>
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color:'blue'
    },
    elementsContainer: {
        flex:1,
        backgroundColor:'black',
        marginLeft: 24,
        marginRight:24,
        flexDirection:'row',
        justifyContent: 'space-between',
        marginBottom:24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;
...................................
justify content: space-around:
.............................

Allocate space around the items based on x axis
//justifyContent: space-between

import { StyleSheet, View, Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>justifyContent: :Space-between</Text>
        <View style={styles.elementsContainer}>
            <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color: 'blue'
    },
    elementsContainer: {
        flex: 1,
        backgroundColor: 'black',
        marginLeft: 24,
        marginRight: 24,
        flexDirection: 'column',
        //  justifyContent: 'space-between',
        justifyContent: 'space-around',
        marginBottom: 24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;
.....................

space-evenly:
............
Evenly distribute space for children the alignment container along the main axis.

space-evenly= space-between + space-around
..

//justifyContent: space-between

import { StyleSheet, View, Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>justifyContent: :Space-between</Text>
        <View style={styles.elementsContainer}>
            <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color: 'blue'
    },
    elementsContainer: {
        flex: 1,
        backgroundColor: 'black',
        marginLeft: 24,
        marginRight: 24,
        flexDirection: 'column',
        //  justifyContent: 'space-between',
        //justifyContent: 'space-around',
        justifyContent:'space-evenly',
        marginBottom: 24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;
.....................................................................................
				Align items
....................................................................................

Align items going to allocate space based "Y/Cross " axis.

Justify Content always X axis where AlignItems y axis.


AlignItems: 'stretch' | 'flex-start',|'flex-end' | 'center'| 'baseline'

eg:

Flex-start:

import { View, StyleSheet } from 'react-native'

const MyComponent = props => {
    return <View style={styles.container}>
        {/* i want to use existing style + extra style */}
        <View style={[styles.box, { backgroundColor: 'blue' }]} />
        <View style={[styles.box, { backgroundColor: 'skyblue' }]} />
        <View style={[styles.box, { backgroundColor: 'steelblue', width: 'auto', minWidth: 50 }]} />
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        marginTop: 1,
        backgroundColor: 'aliceblue',
        minHeight: 200,
        flexDirection:'column',
        alignItems:'flex-start',

    },
    box: {
        height: 50,
        width: 50
    }
})

const App = () => {
    return <MyComponent />
}
export default App;
.............

Flex-end:
import { View, StyleSheet } from 'react-native'

const MyComponent = props => {
    return <View style={styles.container}>
        {/* i want to use existing style + extra style */}
        <View style={[styles.box, { backgroundColor: 'blue' }]} />
        <View style={[styles.box, { backgroundColor: 'skyblue' }]} />
        <View style={[styles.box, { backgroundColor: 'steelblue', width: 'auto', minWidth: 50 }]} />
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        marginTop: 1,
        backgroundColor: 'aliceblue',
        minHeight: 200,
        flexDirection:'column',
        alignItems:'flex-end',

    },
    box: {
        height: 50,
        width: 50
    }
})

const App = () => {
    return <MyComponent />
}
export default App;

...
center
.....
alignItems:'center',
import { View, StyleSheet } from 'react-native'

const MyComponent = props => {
    return <View style={styles.container}>
        {/* i want to use existing style + extra style */}
        <View style={[styles.box, { backgroundColor: 'blue' }]} />
        <View style={[styles.box, { backgroundColor: 'skyblue' }]} />
        <View style={[styles.box, { backgroundColor: 'steelblue', width: 'auto', minWidth: 50 }]} />
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        marginTop: 1,
        backgroundColor: 'aliceblue',
        minHeight: 200,
        flexDirection:'column',
        //alignItems:'flex-end',
        alignItems:'center',

    },
    box: {
        height: 50,
        width: 50
    }
})

const App = () => {
    return <MyComponent />
}
export default App;
.....
base line:
import { View, StyleSheet } from 'react-native'

const MyComponent = props => {
    return <View style={styles.container}>
        {/* i want to use existing style + extra style */}
        <View style={[styles.box, { backgroundColor: 'blue' }]} />
        <View style={[styles.box, { backgroundColor: 'skyblue' }]} />
        <View style={[styles.box, { backgroundColor: 'steelblue', width: 'auto', minWidth: 50 }]} />
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        marginTop: 1,
        backgroundColor: 'aliceblue',
        minHeight: 200,
        flexDirection:'column',
        //alignItems:'flex-end',
        alignItems:'baseline',

    },
    box: {
        height: 50,
        width: 50
    }
})

const App = () => {
    return <MyComponent />
}
export default App;
......................................................................................
stretch:
  To stretch children of a container to match "height" of the container's cross axis.
 
import { View, StyleSheet } from 'react-native'

const MyComponent = props => {
    return <View style={styles.container}>
        {/* i want to use existing style + extra style */}
        <View style={[styles.box, { backgroundColor: 'blue' }]} />
        <View style={[styles.box, { backgroundColor: 'skyblue' }]} />
        <View style={[styles.box, { backgroundColor: 'steelblue', width: 'auto', minWidth: 50 }]} />
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        marginTop: 1,
        backgroundColor: 'aliceblue',
        minHeight: 200,
        flexDirection:'column',
        //alignItems:'flex-end',
        alignItems:'stretch',

    },
    box: {
        height: 50,
        width: 50
    }
})

const App = () => {
    return <MyComponent />
}
export default App;
.....................................................................................
.....................................................................................
				Align self - child element 
....................................................................................
Align self is similar to Align items and justify content but align self is going to have power child elements can controler their alignments.
align self can override the values set by alignItems.


Elements can align itself.

alignSelf: 'stretch' | 'flex-start',|'flex-end' | 'center'| 'baseline'

import { StyleSheet, View, Text } from 'react-native'

const MyComponent = props => {
    return <View style={styles.container}>
        <View
            style={[
                styles.box,
                {
                    alignSelf:'stretch',
                    width: 'auto',
                    minWidth: 50,
                    backgroundColor: 'red',
                },
            ]}
        />
        <View style={[styles.box, { backgroundColor: 'skyblue',alignSelf:'center' }]} />
        <View style={[styles.box, { backgroundColor: 'steelblue',alignSelf:'flex-end' }]} />
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor:'yellow',
        height:50,
    },
    box: {
        width: 50,
        height: 50,
    }
})

const App = () => {
    return <MyComponent />
}

export default App;
....................................................................................
			Flex wrap
....................................................................................
if more childrens beyond container size, it starts overflow, in order avoid overflow
meaning that you want to lay elements within container... we can use flex wrap.
import { StyleSheet, View, Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>Flex wrap</Text>
        <View style={styles.elementsContainer}>
            <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
            
            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
            
            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
            
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
          
        
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color: 'blue'
    },
    elementsContainer: {
        flex: 1,
        backgroundColor: 'black',
        flexWrap:'wrap',
        flexDirection: 'column',
        justifyContent: 'flex-start',
        marginBottom: 24
    }

})

const App = () => {
    return <MyComponent />
}

export default App;
....................................................................................
				Gap
....................................................................................

How to allocate space among elements?

 Flex gap
 =>Column gap
 =>Row gap				

import { StyleSheet, View, Text } from 'react-native'

const MyComponent = props => {
    // Flex container
    return <View style={styles.container}>
        <Text style={styles.headerStyle}>Flex wrap</Text>
        <View style={styles.elementsContainer}>
            <View style={{ width: 50, height: 50, backgroundColor: 'red' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
            
            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
            
            <View style={{ width: 50, height: 50, backgroundColor: 'yellow' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'green' }} />
            
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'white' }} />
            <View style={{ width: 50, height: 50, backgroundColor: 'blue' }} />
          
        
        </ View>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor:'pink'
    },
    headerStyle: {
        fontSize: 29,
        textAlign: 'center',
        fontWeight: 'bold',
        marginBottom: 24,
        color: 'blue'
    },
    elementsContainer: {
        flex: 1,
        backgroundColor: 'steelblue',
        flexWrap:'wrap',
        flexDirection: 'column',
        alignContent: 'flex-start',
        marginBottom: 24,
        rowGap:10,
        columnGap:10
    }

})

const App = () => {
    return <MyComponent />
}

export default App;
....................................................................................
				Types of layout

1.Absolute 
2.Relative
 
The layout property called "position"

position: 'top' | 'right' | 'bottom' | left

position property controls the element position. generally elements are positioned according to natural positioning order like row wise or column

Relative:
 =>This is default layout.
 =>Elements are positioned relatively to the container.

Absolute:
  =>The elements are place not based on the normal layout work flow.
  =>we have to override postion property.


import { StyleSheet, View, Text } from 'react-native'

const MyComponent = () => {
    // Flex container
    return <View style={styles.container}>

        {/* <View style={[styles.box, { backgroundColor: 'powderblue', top: 25, left: 25, position: 'relative' }]} />
        <View style={[styles.box, { backgroundColor: 'skyblue', top: 50, left: 50, position: 'relative' }]} />
        <View />
        <View style={[styles.box, { backgroundColor: 'red', top: 75, left: 75, position: 'relative' }]} /> */}
        <View style={[styles.box, { backgroundColor: 'powderblue', top: 25, left: 25, position: 'absolute' }]} />
        <View style={[styles.box, { backgroundColor: 'skyblue', top: 50, left: 50, position: 'absolute' }]} />
        <View />
        <View style={[styles.box, { backgroundColor: 'red', top: 75, left: 75, position: 'absolute' }]} />
        <View />
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'pink',
        minWidth: 200,
        marginTop: 10,
        flexDirection: 'row',
        flexWrap: 'wrap'

    },
    box: {
        height: 50,
        width: 50
    }

})

const App = () => {
    return <MyComponent />
}

export default App;
..................................................................................
				Mixing layout properties
....................................................................................

Flex direction : row
Justify content: flex-start
AlignItems:flex-start

https://yogalayout.com/docs
....................................................................................
				 Margins and Padding
....................................................................................
Margins will add space outside element in all directions : top,right,bottom,left
Padding will add space within element in all directions: top,right,bottom,left

marginTop:10
paddingTop:10

....................................................................................
				Style Sheet Composition
...................................................................................

coimbines two styles into one style

StyleeSheet.compose(style1,style2,style3,styleN)

style1 can be overriden by styles2


import { StyleSheet, Text, View } from 'react-native'



const App = props => {
    return <View style={container}>
        <Text style={text}>Hello</Text>
    </View>
}
//page style :Common style 
const page = StyleSheet.create({
    container: {
        flex: 1,
        padding: 24,
        backgroundColor: "pink"
    },
    text: {
        fontSize: 30,
        color: '#000'
    }
})
//list styles 


const lists = StyleSheet.create({
    listContainer: {
        flex: 1,
        backgroundColor: '#61dafb'
    },
    listItem: {
        fontStyle: 'italic',
        fontWeight: 'bold'
    }
})

//merge twos 
const container = StyleSheet.compose(page.container, lists.container)
const text = StyleSheet.compose(page.text, lists.listItem)


export default App; 
.....................................................................................
			     ScrollView,ListView,SectionList
.....................................................................................
.....................................................................................   			      List 

render more items on single screen:

import { View, Text } from 'react-native'

const App = () => {
    return <View>
          <Text>Hello</Text>
          <Text>Hello</Text> 
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text> 
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text> 
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text> 
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text> 
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text> 
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text> 
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text> 
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
          <Text>Hello</Text>
    </View>
}
export default App;

When you render this , you will not able to see more items on single screen.
..................................................................................
				Scroll Behaviour
....................................................................................
			    Types of Views

 ->View
 ->ScrollView
 ->ListView
    ->FlatList
    ->SectionList

->View
   View is going to hold child elements , act as container
->ScrollView
   View is going to hold child elements,act as container with scrollbar 

ScrollView:
  It is generic scrolling container that can multiple elements/components.
  ScrollView supports horizontal or Vertical View.

import {Text, ScrollView } from 'react-native'

const App = () => {
    return <ScrollView>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
        <Text>Hello</Text>
    </ScrollView>
}
export default App;
...................................................................................
				List View
.....................................................................................

FlatList:
=>FlatList component displays a scrolling list of changing but with structured data.
=>FlatList works well for long list of data,where no of items change over time.
=>FlatList provides good perfomance benefits over ScrollView

   ScrollView displays the data/items at once, if we have more items , it will take    time
   FlatList only renders elements that are currently showing on the screen, not all    elements at once

In React:

{array.map(item=><li>{item.text}</li>}

FlatList:

 <FlatList data={TODOS} renderItem={(obj)=>{
     return <Text >{obj.item.todo.title}</Text>
 }} />

data:
  Data prop is called datasource which is plain array

renderItem:
  Takes an item from data prop and renders it into the list.
 
renderItem({
 item:ItemObject(todo,Customer),
 index:number,
 separators: {
   highlight:()=>{},
   unhighlight:()=>{},
   updateProps:(select:'loading'|'trailing',newProps:any)
  
 }
})

keyExtractor:
  keyExtractor={(item)=>item.id}

....

import { FlatList, Text, View } from 'react-native'
import TODOS from './mockdata/todos'


const Todo = props => {
    return <View>
        <Text>Todo</Text>
        {/* <FlatList
            data={props.todos}
            renderItem={(obj) => {
                console.log(obj)
                return <Text>{obj.item.title}</Text>
            }} /> */}
        {/* <FlatList
            data={props.todos}
            renderItem={({item}) => {
                console.log(item)
                return <Text>{item.title}</Text>
            }} /> */}
        {/* <FlatList
            data={props.todos}
            renderItem={({ item: { title } }) => {
                return <Text>{title}</Text>
            }} /> */}
        <FlatList
            data={props.todos}
            renderItem={({ item: { title } }) => <Text>{title}</Text>}
            keyExtractor={item => item.id}
        />
    </View>
}


const App = () => {
    return <View>
        <Todo todos={TODOS} />
    </View>

}
export default App;
...................................................................................
                          Section List
..................................................................................

It is special list which shows data based on category, showing nested array data

<SectionList sections={list} renderItem=>{} renderSectionHeader={} keyExtractor={} >

Array must have data key to render item.

mock-data/courses.js
const COURSELIST = [
  {
    title: 'User Interface',
    data: [
      'HTML',
      'CSS',
      'javascript',
      'Android',
      'IOS',
      'Flutter',
      'React',
      'Angular',
      'Vue',
    ],
  },
  {
    title: 'Back end',
    data: ['Java', 'C#', 'Microservices', 'Python'],
  },
  {
    title: 'Data Stores',
    data: ['mysql', 'oracle', 'mongo', 'redis'],
  },
];
export default COURSELIST;
.....................................................................................
//Section List 
import { SectionList, Text, View } from 'react-native'
import COURSELIST from './mockdata/course'


const Course = props => {
    console.log(props)
    return <View>
        <SectionList
            sections={props.courselist}
            renderItem={({item}) => {
                console.log(item)
                return <Text>{item}</Text>
            }}
            keyExtractor={(item, index) => {
                return item + index
            }}
            renderSectionHeader={({ section: { title } }) => {
                return <Text>{title}</Text>
            }}
        />
        
       

    </View>
}


const App = () => {
    return <View>
        <Course courselist={COURSELIST} />
    </View>

}
export default App;
.....................................................................................
			 Component LifeCycle hooks
		     Networking(Web Service Integration)


React provides three life cycle phases

1.Mount
2.Update
3.UnMount

1.Mount :
   It is inital stage when components starts creating , rendering into Target.

1.1.constructor 
  It is called during component creation, generally we never use this constructor
1.2.render
  During render , React engine creates "Component Tree or Virtual Tree". Which is not real "Elements" like Text,View.
 Once the Virtual Tree is ready, React Engine will insert / transform it into platform specific elements, incase browser it becomes "DOM element", Incase Mobile it becomes "Mobile Native Element"
 
1.3.After Mount(After insert into browser or Mobile)
 
2.ComponentDidMount
   It is life cycle method which is called once the UI has been inserted into target.
 ComponentDidMount is most usefull life cycle hook which is used to do some resource insentive taks such as
 =>Web Service calls
 =>Web socket calls
 =>Reactive Calls
 =>Timers

When we use functional component,  there is hook called "useEffect" is used
....................................................................................

Update Phase:
............

 Once the UI is ready, then user starts interacting , from there update phase starts.
Like clicking button, tapping or touching items.

update phase is triggered by "setState(useState),newProps,forceUpdate"

1.render:
  render is preparing new changes with "virtual Tree"...
  React Engine will update the new changes in then UI.

2.componentDidUpdate
  This method is called once the rerendering completed,

 When we use functional component,  there is hook called "useEffect" is used
...................................................................................
UnMount:
  It is last phase when component or component tree is removed from the memory.

ComponentWillUnMount:
 It is method is called once the component is removed.
 It is very usefull when you want to remove some resources like event listeners,websocket closing...

.....................................................................................
Mount and web Service Calls:
............................

How  to  call rest apis?
 js provides api called "XHR"

XHR is very low level api used for api communications.
Now a days we have frameworks/libs for xhr 

Popular libs
1.fetch -from google
2.axios - community
etc..


when to make api call calls in UI Apps?

1.during inital render.
   when you lanuch app you need to load data, that time we need to talk to api.
2.after user interaction
   when you submit a form, you press any time, when you press menu...

inside componentDidMount/useEffect is used to initalize
 =>Ajax calls
 =>web sockets
 =>Timers
 =>Rxjs subscriptions

useEffect(()=>{},[])

When you make api call you have to think three things

1.How to handle data
2.How to handle error
3.How to handle slow calls


import { StyleSheet, Text, View, Button, Alert, StatusBar, ActivityIndicator, FlatList } from 'react-native'
import { useEffect, useState } from 'react';

const Todos = props => {
    //declare state to hold items
    const [todos, setTodos] = useState({
        error: null,
        isLoaded: false,  //spinners or progress bar 
        items: [] //todo data 
    })
    //componentDidMount life cycle method 
    useEffect(() => {
        const url = `https://jsonplaceholder.typicode.com/todos`;
        fetch(url)
            .then(res => res.json())
            .then(todos => {
                console.log(todos)
                setTodos({
                    items: todos,
                    isLoaded: true
                })
            })
            .catch(err => {
                setTodos({
                    isLoaded: true,
                    error: err
                })
            })
    }, [])

    const { error, isLoaded, items } = todos;
    // conditional rendering:
    if (error) {
        return <View>
            <Text>Error: {error.message}</Text>
        </View>
    } else if (!isLoaded) {
        //show spinner
        return <View style={{
            alignItems: 'center', justifyContent: 'center'
        }}>
            <ActivityIndicator size="large" color="#000ff" />
        </View >
    } else {
        //show data
        return <FlatList
            keyExtractor={(todo) => {
                return todo.id
            }}
            data={items}
            renderItem={({ item }) => {
                const { title } = item
                return <View style={styles.item} >
                    <Text style={styles.text}>{title}</Text>
                </View>
            }

            }
        />
    }
}

const App = () => {
    return <View style={styles.container}>
        <Text style={{ alignItems: 'center', justifyContent: 'center',fontWeight:'bold' ,color:'red' ,textAlign:'center'}} >Todo App</Text>
        <Todos />

    </View>
}

//page style :Common style 
const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor:'white',
        marginTop: StatusBar.currentHeight || 0
    },
    item: {
        backgroundColor: '#f9c2ff',
        padding: 20,
        marginVertical: 8,
        marginHorizontal: 8
    },
    title: {
        fontSize: 32
    }
})

export default App; 

Assigment :
   You have to get description on each item when you click 
Use :Alert.alert
.....................................................................................
			How to select item 

import { View, StyleSheet, Text, StatusBar, ActivityIndicator, FlatList, Alert } from "react-native"
import { useEffect, useState } from "react"

const Todo = () => {
    const [todos, setTodos] = useState({
        error: null,
        isLoaded: false,  //spinners or progress bar 
        items: [] //todo data 
    })
    //ComponentDidMount
    useEffect(() => {
        //logic- api call
        const apiURL = 'https://jsonplaceholder.typicode.com/todos'
        fetch(apiURL).then(response => {
            return response.json()
        }).then(todos => {
            setTodos({
                items: todos,
                isLoaded: true
            })
        }).catch(err => {
            setTodos({
                isLoaded: true,
                error: err
            })
        })

    }, [])

    const onSelect = item => {
        console.log(item)
        Alert.alert(JSON.stringify(item))
    }

    //conditional Rendering : rendering ui based on state

    const { error, isLoaded, items } = todos;

    if (error) {
        return <View>
            <Text>Error: {error.message}</Text>
        </View>
    } else if (!isLoaded) {
        return <View style={{
            alignItems: 'center', justifyContent: 'center'
        }}>
            <ActivityIndicator size="large" color="#000ff" />
        </View >
    } else {
        //show data
        return <FlatList
            keyExtractor={(todo) => {
                return todo.id
            }}
            data={items}
            renderItem={({ item }) => {
                const { title } = item
                return <View style={styles.item} >
                    <Text onPress={() => {
                        onSelect(item)
                    }} style={styles.text}>{title}</Text>
                </View>
            }

            }
        />
    }
}

export default function App() {
    return <View style={styles.container}>
        <Text style={{ alignItems: 'center', justifyContent: 'center', fontWeight: 'bold', color: 'red', textAlign: 'center' }} >Todo App</Text>
        <Todo />
    </View>
}

//page style :Common style 
const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'white',
        marginTop: StatusBar.currentHeight || 0
    },
    item: {
        backgroundColor: '#f9c2ff',
        padding: 20,
        marginVertical: 8,
        marginHorizontal: 8
    },
    title: {
        fontSize: 32
    }
})
....................................................................................
			Handling Touch Features in React Native
....................................................................................

Handling touch features:
 User interactions mainly with mobile apps through touch.
 They can use a combination of gestures,such as tapping on a button,scrolling list, zooming on a map.


Touchable components:

1.Touchable Highlight

import { StyleSheet, Text, View, Button, Alert, StatusBar, ActivityIndicator, FlatList, TouchableHighlight } from 'react-native'
import { useEffect, useState } from 'react';

const Todos = props => {
    //declare state to hold items
    const [todos, setTodos] = useState({
        error: null,
        isLoaded: false,  //spinners or progress bar 
        items: [] //todo data 
    })
    //componentDidMount life cycle method 
    useEffect(() => {
        const url = `https://jsonplaceholder.typicode.com/todos`;
        fetch(url)
            .then(res => res.json())
            .then(todos => {
                console.log(todos)
                setTodos({
                    items: todos,
                    isLoaded: true
                })
            })
            .catch(err => {
                setTodos({
                    isLoaded: true,
                    error: err
                })
            })
    }, [])

    const { error, isLoaded, items } = todos;
    // conditional rendering:
    if (error) {
        return <View>
            <Text>Error: {error.message}</Text>
        </View>
    } else if (!isLoaded) {
        //show spinner
        return <View style={{
            alignItems: 'center', justifyContent: 'center'
        }}>
            <ActivityIndicator size="large" color="#000ff" />
        </View >
    } else {
        //show data
        return <FlatList
            keyExtractor={(todo) => {
                return todo.id
            }}
            data={items}
            renderItem={({ item }) => {
                const { title } = item
                return <TouchableHighlight onPress={() => {
                        //select item
                }} activeOpacity={0.6} underlayColor="#DDDDD">
                    <View style={styles.item} >

                        <Text style={styles.text}>{title}</Text>
                    </View>
                </TouchableHighlight>

            }

            }
        />
    }
}

const App = () => {
    return <View style={styles.container}>
        <Text style={{ alignItems: 'center', justifyContent: 'center', fontWeight: 'bold', color: 'red', textAlign: 'center' }} >Todo App</Text>
        <Todos />

    </View>
}

//page style :Common style 
const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'white',
        marginTop: StatusBar.currentHeight || 0
    },
    item: {
        backgroundColor: '#f9c2ff',
        padding: 20,
        marginVertical: 8,
        marginHorizontal: 8
    },
    title: {
        fontSize: 32
    }
})

export default App; 
.....................................................................................
...................................................................................
			  Status Bar and SafeAreaView
...................................................................................

<StatusBar animated, backgroundColor, barStyle.../>

SafeAreaView:

The purpose of SafeAreaView is to render content within the safe area boundaries of a device. It is currently only applicable to iOS devices with iOS version 11 or later.
Note: if you target both devices, better we can wrap other views within safe area view.
incase of android this view will be ignored automatically.

import React, {useState} from 'react';
import {
  Button,
  Platform,
  SafeAreaView,
  StatusBar,
  StyleSheet,
  Text,
  View,
} from 'react-native';

const STYLES = ['default', 'dark-content', 'light-content'];
const TRANSITIONS = ['fade', 'slide', 'none'];

const App = () => {
  const [hidden, setHidden] = useState(false);
  const [statusBarStyle, setStatusBarStyle] = useState(STYLES[0]);
  const [statusBarTransition, setStatusBarTransition] = useState(
    TRANSITIONS[0],
  );

  const changeStatusBarVisibility = () => setHidden(!hidden);

  const changeStatusBarStyle = () => {
    const styleId = STYLES.indexOf(statusBarStyle) + 1;
    if (styleId === STYLES.length) {
      setStatusBarStyle(STYLES[0]);
    } else {
      setStatusBarStyle(STYLES[styleId]);
    }
  };

  const changeStatusBarTransition = () => {
    const transition = TRANSITIONS.indexOf(statusBarTransition) + 1;
    if (transition === TRANSITIONS.length) {
      setStatusBarTransition(TRANSITIONS[0]);
    } else {
      setStatusBarTransition(TRANSITIONS[transition]);
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar
        animated={true}
        backgroundColor="#61dafb"
        barStyle={statusBarStyle}
        showHideTransition={statusBarTransition}
        hidden={hidden}
      />
      <Text style={styles.textStyle}>
        StatusBar Visibility:{'\n'}
        {hidden ? 'Hidden' : 'Visible'}
      </Text>
      <Text style={styles.textStyle}>
        StatusBar Style:{'\n'}
        {statusBarStyle}
      </Text>
      {Platform.OS === 'ios' ? (
        <Text style={styles.textStyle}>
          StatusBar Transition:{'\n'}
          {statusBarTransition}
        </Text>
      ) : null}
      <View style={styles.buttonsContainer}>
        <Button title="Toggle StatusBar" onPress={changeStatusBarVisibility} />
        <Button title="Change StatusBar Style" onPress={changeStatusBarStyle} />
        {Platform.OS === 'ios' ? (
          <Button
            title="Change StatusBar Transition"
            onPress={changeStatusBarTransition}
          />
        ) : null}
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: '#ECF0F1',
  },
  buttonsContainer: {
    padding: 10,
  },
  textStyle: {
    textAlign: 'center',
    marginBottom: 8,
  },
});

export default App;
.....................................................................................			....................................................................................
			 Switch Component
....................................................................................
in order to toggle, enable and disable features



import React from 'react';
import { View, Button, Text, ScrollView, StyleSheet, StatusBar, Switch, SafeAreaView } from 'react-native'

let id = 0

const styles = StyleSheet.create({
    todoContainer: {
        marginTop: 50,
        flexDirection: 'row',
        alignItems: 'center',
    },
    appContainer: {
        paddingTop: 10,
        marginTop: 20,

    },
    // Let container (ScrollView (todo container) & View (app container)) fills up all possible space
    fill: {
        flex: 1,
    }
})

export const Todo = props => (
    <View style={styles.todoContainer}>
        <Switch value={props.todo.checked} onValueChange={props.onToggle} />
        <Button onPress={props.onDelete} title="delete" />
        <Text>{props.todo.text}</Text>
    </View>
)
class App extends React.Component {
    state = {
        todos: [],
    }
    addTodo() {
        id++
        const text = `TODO number ${id}`
        this.setState({
            todos: [
                ...this.state.todos,
                { id: id, text: text, checked: false },
            ],
        })
    }

    removeTodo(id) {
        this.setState({
            todos: this.state.todos.filter(todo => todo.id !== id)
        })
    }

    toggleTodo(id) {
        this.setState({
            todos: this.state.todos.map(todo => {
                if (todo.id !== id) return todo
                return {
                    id: todo.id,
                    text: todo.text,
                    checked: !todo.checked,
                }
            })
        })
    }

    render() {
        return (
            <SafeAreaView style={[styles.appContainer, styles.fill]}>
                <StatusBar
                    animated={true}
                    backgroundColor="#61dafb"
                    barStyle={"default"}
                    showHideTransition={"fade"}
                    hidden={false} />
                <Text>Todo count: {this.state.todos.length}</Text>
                <Text>Unchecked todo count: {this.state.todos.filter(todo => !todo.checked).length}</Text>
                <Button onPress={() => this.addTodo()} title="Add TODO" />
                <ScrollView style={styles.fill}>
                    {this.state.todos.map(todo => (
                        <Todo
                            onToggle={() => this.toggleTodo(todo.id)}
                            onDelete={() => this.removeTodo(todo.id)}
                            todo={todo}
                        />
                    ))}
                </ScrollView>
            </SafeAreaView>
        )
    }
}
export default App;

Assignment : Build image Gallery: get images from the url.

end point:https://jsonplaceholder.typicode.com/photos
....................................................................................
			 Component As Prop

import { Text, View, StyleSheet } from "react-native"

const Panel = props => {
    return <>
        {props.children}
    </>
}
const Content = props => {
    return <>{props.children}</>
}
const Title = props => <Text>{props.title}</Text>

export default function App() {
    return <View style={styles.container}>
        <Panel>
            <Title title={"Home Screen"} />
            <Content>
                <Text>MyContent</Text>
            </Content>
        </Panel>
    </View>
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#fff',
        alignItems: 'center',
        justifyContent: 'center',
    }
})

.....................................................................................
				React Native Navigation
.....................................................................................				
How navigation works?

In a web browser, you can link to different pages using an anchor (<a>) tag. When the user clicks on a link, the URL is pushed to the browser history stack.

 When the user presses the back button, the browser pops the item from the top of the history stack, so the active page is now the previously visited page.

React Native doesn't have a built-in idea of a global history stack like a web browser does -- this is where React Navigation enters the story.

React Navigation's stack navigator provides a way for your app to transition between screens and manage navigation history.

If your app uses only one stack navigator then it is conceptually similar to how a web browser handles navigation state - your app pushes and pops items from the navigation stack as users interact with it, and this results in the user seeing different screens. 

A key difference between how this works in a web browser and in React Navigation is that React Navigation's stack navigator provides the gestures and animations that you would expect on Android and iOS when navigating between routes in the stack.

Core concepts in React Native Navigation:
.........................................

1.Screen
   =>It is a special component,which only display Userinterface, not having any logic      It acts container.
2.Component
   => It is component having biz logic and ui logic...

Setup React Navigation:

in case your project is in "React Native cli"
in case your project is in "Expo work flow"

Common for both projects:

npm install @react-navigation/native @react-navigation/native-stack

For Bare React Native project:

npm install react-native-screens react-native-safe-area-context


For Expo Managed Projects
npx expo install react-native-screens react-native-safe-area-context



React Native  offers lot built in components

1.NavigationContainer

import { NavigationContainer } from '@react-navigation/native'
import { StyleSheet, View, Text } from 'react-native'

const Home = () => <Text>Home</Text>

const App = () => {
    return <View style={styles.container}>
        <NavigationContainer>
            {/* Rest of your app code */}
        </NavigationContainer>
    </View>
}
const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#fff',
        alignItems: 'center',
        justifyContent: 'center',
    }
})
export default App;

...................................................................................
				Multi screen-Page
.................................................................................

Types of navigation:
1.screen to screen - stack navigation -  @react-navigation/stack
2.Tab - tab based navivation.  @react-navigation/bottom-tabs
3.Drawer -Drawer navigation.   @react-navigation/drawer

Stack Navigation:

Moving among screens: How to move from one screen to another screen?

StackNavigator : 
 Object used to navigate between screen.
 Stack Object used to  represent stack navigator.

import { createStackNavigator } from '@react-navigation/stack'

//create Stack Object
const Stack  = createStackNavigator();
console.log(Stack)

Object {
  "Navigator": [Function StackNavigator],
  "Screen": [Function Screen],
}


1.createStackNavigator is a function that returns an object containing 2 properties: Screen and Navigator.
2.Both of them are React components used for configuring the navigator.
The Navigator should contain Screen elements as its children to define the configuration for routes.

3.NavigationContainer is a component which manages our navigation tree and contains the navigation state. This component must wrap all navigators structure. Usually, we'd render this component at the root of our app, which is usually the component exported from App.js.

import * as React from 'react';
import { Text, View, StyleSheet } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
//stack navigator
import {createNativeStackNavigator} from '@react-navigation/native-stack';

//create Stack Object
const Stack = createNativeStackNavigator();

const Home = () => {
    return <View style={styles.container}>
        <Text>Home Screen</Text>
    </View>
}
const Profile = () => {
    return <View style={styles.container}>
        <Text>Profile Screen</Text>
    </View>
}


export default function App() {
    return <NavigationContainer>
        <Stack.Navigator>
              <Stack.Screen name="Home" component={Home}/>
              <Stack.Screen name="Profile" component={Profile}/>
        </Stack.Navigator>
    </NavigationContainer>
}
const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#fff',
        alignItems: 'center',
        justifyContent: 'center',
    },
});
....................................................................................
			....................................................................................
			   How to move between screens
..................................................................................

Navigating to a new screen​

Every Component receives information from the parent component as a prop.
When component is rendered via route,React Navigator injects an object called "Navigation" Object as prop to every Component


Props;
Object {
  "navigation": Object {
    "addListener": [Function addListener],
    "canGoBack": [Function canGoBack],
    "dispatch": [Function dispatch],
    "getId": [Function getId],
    "getParent": [Function getParent],
    "getState": [Function anonymous],
    "goBack": [Function anonymous],
    "isFocused": [Function isFocused],
    "navigate": [Function anonymous],
    "pop": [Function anonymous],
    "popToTop": [Function anonymous],
    "push": [Function anonymous],
    "removeListener": [Function removeListener],
    "replace": [Function anonymous],
    "reset": [Function anonymous],
    "setOptions": [Function setOptions],
    "setParams": [Function anonymous],
  },
  "route": Object {
    "key": "Home-V-z_dGCJfqcHgNXxzxRGK",
    "name": "Home",
    "params": undefined,
  },

Eg:
import * as React from 'react';
import { Text, View, StyleSheet, Button, Alert } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
//stack navigator
import { createNativeStackNavigator } from '@react-navigation/native-stack';

//create Stack Object
const Stack = createNativeStackNavigator();

const Home = (props) => {
    console.log(props)
    const { navigation: { navigate } } = props
    const moveToProfile = evt => {
        Alert.alert('moving screen')
        //logic to move from this screen to next screen.
        // props.navigation.navigate('Profile')
        //  navigation.navigate('Profile')
        navigate('Profile')
    }

    return <View style={styles.container}>
        <Text>Home Screen</Text>
        {/* <Button title="Profile" onPress={moveToProfile} /> */}
        <Button title="Profile" onPress={() => navigate('Profile')} />
    </View>
}
const Profile = () => {
    return <View style={styles.container}>
        <Text>Profile Screen</Text>
    </View>
}


export default function App() {
    return <NavigationContainer>
        <Stack.Navigator>
            <Stack.Screen name="Home" component={Home} />
            <Stack.Screen name="Profile" component={Profile} />
        </Stack.Navigator>
    </NavigationContainer>
}
const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#fff',
        alignItems: 'center',
        justifyContent: 'center',
    },
});
....................................................................................
		Passing params from one screen to another Screen
....................................................................................

Pass params to a route by putting them in an object as a second parameter to the navigation.navigate function:

navigation.navigate('RouteName', { /* params go here */ })

import * as React from 'react';
import { Text, View, StyleSheet, Button, Alert } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
//stack navigator
import { createNativeStackNavigator } from '@react-navigation/native-stack';

//create Stack Object
const Stack = createNativeStackNavigator();

const Home = (props) => {
    console.log(props)
    const { navigation: { navigate } } = props
    const moveToProfile = evt => {
        Alert.alert('moving screen')
        //logic to move from this screen to next screen.
        // props.navigation.navigate('Profile')
        //  navigation.navigate('Profile')
        navigate('Profile')
    }

    const profile = {
        id:1,
        name:'Subramanian Murugan'
    }

    return <View style={styles.container}>
        <Text>Home Screen</Text>
        {/* <Button title="Profile" onPress={moveToProfile} /> */}
        {/* <Button title="Profile" onPress={() => navigate('Profile', { id: 1, name: 'Subramanian' })} /> */}
        <Button title="Profile" onPress={() => navigate('Profile', { profile })} />
    </View>
}
const Profile = props => {
    const { navigation: { goBack }, route: { params } } = props
    return <View style={styles.container}>
        <Text>Profile Screen</Text>
        <Text>{params.profile.id} {params.profile.name}</Text>
        <Button title="Back" onPress={() => goBack()} />

    </View>
}


export default function App() {
    return <NavigationContainer>
        <Stack.Navigator>
            <Stack.Screen name="Home" component={Home} />
            <Stack.Screen name="Profile" component={Profile} />
        </Stack.Navigator>
    </NavigationContainer>
}
const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#fff',
        alignItems: 'center',
        justifyContent: 'center',
    },
});
.....................................................................................
....................................................................................				   setParams

Updating params#

Screens can also update their params, like they can update their state. The navigation.setParams method lets you update the params of a screen.
Basic usage:

navigation.setParams({
  query: 'someText',
})
import * as React from 'react';
import { Text, View, StyleSheet, Button, Alert } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
//stack navigator
import { createNativeStackNavigator } from '@react-navigation/native-stack';

//create Stack Object
const Stack = createNativeStackNavigator();

const Home = (props) => {
    console.log(props)
    const { navigation: { navigate } } = props
    const moveToProfile = evt => {
        Alert.alert('moving screen')
        //logic to move from this screen to next screen.
        // props.navigation.navigate('Profile')
        //  navigation.navigate('Profile')
        navigate('Profile')
    }

    const profile = {
        id: 1,
        name: 'Subramanian Murugan'
    }

    return <View style={styles.container}>
        <Text>Home Screen</Text>
        {/* <Button title="Profile" onPress={moveToProfile} /> */}
        {/* <Button title="Profile" onPress={() => navigate('Profile', { id: 1, name: 'Subramanian' })} /> */}
        {/* <Button title="Profile" onPress={() => navigate('Profile', { profile })} /> */}
        <Button style={{ marginTop: 10 }} title="Profile" onPress={() => navigate('Profile')} />

        <Button style={{ marginTop: 10 }} title="Profile" onPress={() => navigate('Profile', { profile })} />
    </View>
}
const Profile = props => {
    const { navigation: { goBack }, route: { params } } = props
    return <View style={styles.container}>
        <Text>Profile Screen</Text>
        <Text>{params.profile.id} {params.profile.name}</Text>
        <Button title="Back" onPress={() => goBack()} />

        <Button title="Update Params" onPress={() => {
            props.navigation.setParams({ profile: { id: 900, name: 'foo' } })
        }} />

    </View>
}


export default function App() {
    return <NavigationContainer>
        <Stack.Navigator>
            <Stack.Screen name="Home" component={Home} />
            <Stack.Screen name="Profile" component={Profile} initialParams={{ profile: { id: 0, name: 'name' } }} />
        </Stack.Navigator>
    </NavigationContainer>
}
const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#fff',
        alignItems: 'center',
        justifyContent: 'center',
    },
});
...................................................................................
			  Moving from current Screen to Back Screen
...................................................................................

Ways to move from current screen to back screen:
................................................

1.via Current back button
2.via Program
   navigation.goBack()

import * as React from 'react';
import { Text, View, StyleSheet, Button, Alert } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
//stack navigator
import { createNativeStackNavigator } from '@react-navigation/native-stack';

//create Stack Object
const Stack = createNativeStackNavigator();

const Home = (props) => {
    console.log(props)
    const { navigation: { navigate } } = props
    const moveToProfile = evt => {
        Alert.alert('moving screen')
        //logic to move from this screen to next screen.
        // props.navigation.navigate('Profile')
        //  navigation.navigate('Profile')
        navigate('Profile')
    }

    return <View style={styles.container}>
        <Text>Home Screen</Text>
        {/* <Button title="Profile" onPress={moveToProfile} /> */}
        <Button title="Profile" onPress={() => navigate('Profile')} />
    </View>
}
const Profile = props => {
    const { navigation: { goBack } } = props
    return <View style={styles.container}>
        <Text>Profile Screen</Text>
        <Button title="Back" onPress={() => goBack()} />

    </View>
}


export default function App() {
    return <NavigationContainer>
        <Stack.Navigator>
            <Stack.Screen name="Home" component={Home} />
            <Stack.Screen name="Profile" component={Profile} />
        </Stack.Navigator>
    </NavigationContainer>
}
const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#fff',
        alignItems: 'center',
        justifyContent: 'center',
    },
});
.....................................................................................					Configuring the Header Bar
....................................................................................

Header Title:
 By default header title is name of the Route


 <Stack.Screen name="Home" component={Home} />

How to override the default Header title?

   <Stack.Screen options={{title:'My Personal Diary'}} name="Home" component={Home} />

How to update header dynamically based on some props?

<Stack.Screen name="Profile" options={(navigation)=>{
   return {
	title:navigation.route.params.name || ''
   }
}} component={Profile} />
.....................................................................................
.....................................................................................					Configuring the Header Bar
....................................................................................

Header Title:
 By default header title is name of the Route


 <Stack.Screen name="Home" component={Home} />

How to override the default Header title?

   <Stack.Screen options={{title:'My Personal Diary'}} name="Home" component={Home} />

How to update header dynamically based on some props?

<Stack.Screen name="Profile" options={(navigation)=>{
   return {
	title:navigation.route.params.name || ''
   }
}} component={Profile} />
..
import * as React from 'react';
import { Text, View, StyleSheet, Button, Alert } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
//stack navigator
import { createNativeStackNavigator } from '@react-navigation/native-stack';

//create Stack Object
const Stack = createNativeStackNavigator();

const Home = (props) => {
    const { navigation: { navigate } } = props
    const moveToProfile = evt => {
        Alert.alert('moving screen')
        //logic to move from this screen to next screen.
        // props.navigation.navigate('Profile')
        //  navigation.navigate('Profile')
        navigate('Profile')
    }

    const profile = {
        id: 1,
        name: 'Subramanian Murugan'
    }

    return <View style={styles.container}>
        <Text>Home Screen</Text>
        {/* <Button title="Profile" onPress={moveToProfile} /> */}
        {/* <Button title="Profile" onPress={() => navigate('Profile', { id: 1, name: 'Subramanian' })} /> */}
        {/* <Button title="Profile" onPress={() => navigate('Profile', { profile })} /> */}
        <Button style={{ marginTop: 10 }} title="Profile" onPress={() => navigate('Profile')} />

        <Button style={{ marginTop: 10 }} title="Profile" onPress={() => navigate('Profile', { profile })} />
    </View>
}
const Profile = props => {
    const { navigation: { goBack }, route: { params } } = props
    return <View style={styles.container}>
        <Text>Profile Screen</Text>
        <Text>{params.profile.id} {params.profile.name}</Text>
        <Button title="Back" onPress={() => goBack()} />

        <Button title="Update Params" onPress={() => {
            props.navigation.setParams({ profile: { id: 900, name: 'foo' } })
        }} />

    </View>
}


export default function App() {
    return <NavigationContainer>
        <Stack.Navigator>
            <Stack.Screen options={{ title: 'My Personal Diary' }} name="Home" component={Home} />
            <Stack.Screen name="Profile" options={({route}) => {
                console.log(route)
                return {
                    title: `Profile - ${route.params.profile.name}` || ''
                }
            }} component={Profile} initialParams={{ profile: { id: 0, name: 'name' } }} />
        </Stack.Navigator>
    </NavigationContainer>
}
const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#fff',
        alignItems: 'center',
        justifyContent: 'center',
    },
});
....................................................................................
....................................................................................
				Header styles
....................................................................................


There are three key properties to use when customizing the style of your header: headerStyle, headerTintColor, and headerTitleStyle.

headerStyle: a style object that will be applied to the View that wraps the header. If you set backgroundColor on it, that will be the color of your header.

headerTintColor: the back button and title both use this property as their color.

headerTitleStyle: if we want to customize the fontFamily, fontWeight and other Text 
Style properties for the title, we can use this to do it.


import * as React from 'react';
import { Text, View, StyleSheet, Button, Alert } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
//stack navigator
import { createNativeStackNavigator } from '@react-navigation/native-stack';

//create Stack Object
const Stack = createNativeStackNavigator();

const Home = (props) => {
    const { navigation: { navigate } } = props
    const moveToProfile = evt => {
        Alert.alert('moving screen')
        //logic to move from this screen to next screen.
        // props.navigation.navigate('Profile')
        //  navigation.navigate('Profile')
        navigate('Profile')
    }

    const profile = {
        id: 1,
        name: 'Subramanian Murugan'
    }

    return <View style={styles.container}>
        <Text>Home Screen</Text>
        {/* <Button title="Profile" onPress={moveToProfile} /> */}
        {/* <Button title="Profile" onPress={() => navigate('Profile', { id: 1, name: 'Subramanian' })} /> */}
        {/* <Button title="Profile" onPress={() => navigate('Profile', { profile })} /> */}
        <Button style={{ marginTop: 10 }} title="Profile" onPress={() => navigate('Profile')} />

        <Button style={{ marginTop: 10 }} title="Profile" onPress={() => navigate('Profile', { profile })} />
    </View>
}
const Profile = props => {
    const { navigation: { goBack }, route: { params } } = props
    return <View style={styles.container}>
        <Text>Profile Screen</Text>
        <Text>{params.profile.id} {params.profile.name}</Text>
        <Button title="Back" onPress={() => goBack()} />

        <Button title="Update Params" onPress={() => {
            props.navigation.setParams({ profile: { id: 900, name: 'foo' } })
        }} />

    </View>
}


export default function App() {
    return <NavigationContainer>
        <Stack.Navigator>
            <Stack.Screen options={{ title: 'My Personal Diary' }} name="Home" component={Home} />
            <Stack.Screen name="Profile" options={({ route }) => {
                return {
                    title: `Profile - ${route.params.profile.name}` || '',
                    headerStyle: {
                        backgroundColor: 'yellow'
                    },
                    headerTintColor: 'blue',
                    headerTitleStyle: {
                        fontWeight: 'bold'
                    }
                }
            }
            } component={Profile} initialParams={{ profile: { id: 0, name: 'name' } }} />
        </Stack.Navigator>
    </NavigationContainer>
}
const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#fff',
        alignItems: 'center',
        justifyContent: 'center',
    },
});
	 Header Buttons

How to add a button to header?

          <Stack.Screen name="Profile" options={({ route }) => {
                return {
                    title: `Profile - ${route.params.profile.name}` || '',
                    headerRight: () => {
                        return <Button onPress={()=>{
                            alert('Info')
                        }} title="Info" color="red" />
                    }
                }
            }
            } component={Profile} initialParams={{ profile: { id: 0, name: 'name' } }} />

import * as React from 'react';
import { Text, View, StyleSheet, Button, Alert } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
//stack navigator
import { createNativeStackNavigator } from '@react-navigation/native-stack';

//create Stack Object
const Stack = createNativeStackNavigator();

const Home = (props) => {
    const { navigation: { navigate } } = props
    const moveToProfile = evt => {
        Alert.alert('moving screen')
        //logic to move from this screen to next screen.
        // props.navigation.navigate('Profile')
        //  navigation.navigate('Profile')
        navigate('Profile')
    }

    const profile = {
        id: 1,
        name: 'Subramanian Murugan',
    }

    return <View style={styles.container}>
        <Text>Home Screen</Text>
        {/* <Button title="Profile" onPress={moveToProfile} /> */}
        {/* <Button title="Profile" onPress={() => navigate('Profile', { id: 1, name: 'Subramanian' })} /> */}
        {/* <Button title="Profile" onPress={() => navigate('Profile', { profile })} /> */}
        <Button style={{ marginTop: 10 }} title="Profile" onPress={() => navigate('Profile')} />

        <Button style={{ marginTop: 10 }} title="Profile" onPress={() => navigate('Profile', { profile })} />
    </View>
}
const Profile = props => {
    const { navigation: { goBack }, route: { params } } = props
    return <View style={styles.container}>
        <Text>Profile Screen</Text>
        <Text>{params.profile.id} {params.profile.name}</Text>
        <Button title="Back" onPress={() => goBack()} />

        <Button title="Update Params" onPress={() => {
            props.navigation.setParams({ profile: { id: 900, name: 'foo' } })
        }} />

    </View>
}


export default function App() {
    return <NavigationContainer>
        <Stack.Navigator screenOptions={
            {
                headerStyle: {
                    backgroundColor: 'yellow',
                },
                headerTintColor: 'blue',
                headerTitleStyle: {
                    fontWeight: 'bold',
                }
            }
        }>
            <Stack.Screen options={{ title: 'My Personal Diary' }} name="Home" component={Home} />
            <Stack.Screen name="Profile" options={({ route }) => {
                return {
                    title: `Profile - ${route.params.profile.name}` || '',
                    headerRight: () => {
                        return <Button onPress={()=>{
                            alert('Info')
                        }} title="Info" color="red" />
                    }
                }
            }
            } component={Profile} initialParams={{ profile: { id: 0, name: 'name' } }} />
        </Stack.Navigator>
    </NavigationContainer>
}
const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#fff',
        alignItems: 'center',
        justifyContent: 'center',
    },
});
import { Text, View, StyleSheet, Button, Alert } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
//stack navigator
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import { Screen } from 'react-native-screens';

//create Stack Object
const Stack = createNativeStackNavigator();


const Info = prop => {
    return <View style={styles.container}>
        <Text>Info Screen</Text>
    </View>
}

const Home = (props) => {
    const { navigation: { navigate } } = props
    const moveToProfile = evt => {
        Alert.alert('moving screen')
        //logic to move from this screen to next screen.
        // props.navigation.navigate('Profile')
        //  navigation.navigate('Profile')
        navigate('Profile')
    }

    const profile = {
        id: 1,
        name: 'Subramanian Murugan',
    }

    return <View style={styles.container}>
        <Text>Home Screen</Text>
        {/* <Button title="Profile" onPress={moveToProfile} /> */}
        {/* <Button title="Profile" onPress={() => navigate('Profile', { id: 1, name: 'Subramanian' })} /> */}
        {/* <Button title="Profile" onPress={() => navigate('Profile', { profile })} /> */}
        <Button style={{ marginTop: 10 }} title="Profile" onPress={() => navigate('Profile')} />

        <Button style={{ marginTop: 10 }} title="Profile" onPress={() => navigate('Profile', { profile })} />
    </View>
}
const Profile = props => {
    const { navigation: { goBack }, route: { params } } = props
    return <View style={styles.container}>
        <Text>Profile Screen</Text>
        <Text>{params.profile.id} {params.profile.name}</Text>
        <Button title="Back" onPress={() => goBack()} />

        <Button title="Update Params" onPress={() => {
            props.navigation.setParams({ profile: { id: 900, name: 'foo' } })
        }} />

    </View>
}


export default function App() {
    return <NavigationContainer>
        <Stack.Navigator screenOptions={
            {
                headerStyle: {
                    backgroundColor: 'yellow',
                },
                headerTintColor: 'blue',
                headerTitleStyle: {
                    fontWeight: 'bold',
                }
            }
        }>
            <Stack.Screen options={{ title: 'My Personal Diary' }} name="Home" component={Home} />
            <Stack.Screen name="Profile" options={({ route, navigation }) => {
                return {
                    title: `Profile - ${route.params.profile.name}` || '',
                    headerRight: () => {
                        return <Button onPress={() => {
                            alert('Info')
                            navigation.navigate('Info')
                        }} title="Info" color="red" />
                    }
                }
            }
            } component={Profile} initialParams={{ profile: { id: 0, name: 'name' } }} />
            <Stack.Screen name="Info" component={Info} />

        </Stack.Navigator>
    </NavigationContainer>
}
const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#fff',
        alignItems: 'center',
        justifyContent: 'center',
    },
});

...................................................................................
			Navigating from tab to screen
			    Tab + Stack
...................................................................................
import { NavigationContainer } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import { View, Text, StyleSheet, Button } from 'react-native';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';


//create Stack Object
const Tab = createBottomTabNavigator();
const Stack = createNativeStackNavigator();

const Home = props => {
    return <Tab.Navigator>
        <Tab.Screen name="Messages" component={Messages} />
        <Tab.Screen name="Feed" component={Feed} />
    </Tab.Navigator>
}

const Feed = props => {
    return <View style={styles.container}>
        <Text>Feed Screen</Text>
    </View>
}

const Messages = props => {
    const { navigation } = props;
    return <View style={styles.container}>
        <Text>Messages Screen</Text>
        <Button title="go to Settions" onPress={() => {
            navigation.navigate('Settings')
        }} />
    </View>
}
const Settings = props => {
    return <View style={styles.container}>
        <Text>Settings Screen</Text>
    </View>
}
function App() {
    return <NavigationContainer>
        <Stack.Navigator>
            <Stack.Screen
                name="Home"
                component={Home}
                options={{ headerShown: false }}
            />
            <Stack.Screen name="Settings" component={Settings} />
        </Stack.Navigator>
    </NavigationContainer>

}


const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#fff',
        alignItems: 'center',
        justifyContent: 'center',
    },
});

export default App
....................................................................................
				Drawer
.....................................................................................

Steps to install drawer dependency:
....................................

1.install dependency:

npm install @react-navigation/drawer
npm install react-native-gesture-handler react-native-reanimated

2.plugin configuration in babel.config.js

module.exports = {
  presets: ['module:metro-react-native-babel-preset'],
  plugins: ['react-native-reanimated/plugin'],
};

3.reAnimation configuration 
Follow this url
https://docs.swmansion.com/react-native-reanimated

After adding the react-native-reanimated/plugin to your project you may encounter a false-positive "Reanimated 2 failed to create a worklet" error. In most cases, this can be fixed by cleaning the application's cache. Depending on your workflow or favorite package manager that could be done by:

yarn start --reset-cache
npm start -- --reset-cache
expo start -c
or other.

This step has to be down after writing code.

import 'react-native-gesture-handler';
import { NavigationContainer } from '@react-navigation/native';
import { View, Text, StyleSheet, Button } from 'react-native';
import { createDrawerNavigator } from '@react-navigation/drawer';


//Create Drawer
const Drawer = createDrawerNavigator();

//screens

const Feed = () => <Text>Feed</Text>
const Article = () => <Text>Article</Text>

function App() {
    return <NavigationContainer>
        <Drawer.Navigator>
            <Drawer.Screen name="Feed" component={Feed} />
            <Drawer.Screen name="Article" component={Article} />
        </Drawer.Navigator>
    </NavigationContainer>

}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#fff',
        alignItems: 'center',
        justifyContent: 'center',
    },
});

export default App

Note:
import 'react-native-gesture-handler';
  It must be top of the code always.
....................................................................................






				




