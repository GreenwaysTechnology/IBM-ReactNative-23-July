				React js
.....................................................................................

What is React?

  React is javascript lib for building user interface 
  React java script lib like jquery,framework like angular.

What is User interface application?
 
  The user where he interacts , those applications are called user interface applications.

Eg:
  Desktop applications
     if you want to interact with os, shell is primary user interface
     shell in windows, command,powershell,explorer 

  Web Browser:
     It is one of the application software, acts as user interface for web applications
 
 Hand Held devices
  =>Mobile applications
  =>Watch
  =>Tabs
  =>TV
 etc..
.....................................................................................
				Types of web app
.....................................................................................


1.Static Web apps -  1989 to 1995
    built at server end,accessed by clients using browser
    HTML Pages are primary output.

2.Dynamic content web apps - 1996 to till date
    built at server end, access by clients using browser
eg:
  JEE(Servlets,jsp)
  Asp.net
  PHP
 etc.....

3.Web Services -1998 to till
    Data driven apps
     built at server end, accessed by clients  such  as mobiles, client side browser apps.
 SOAP - XML based web service
 RESTFull -  Different format based web service - JSON,XML,PDF....
....................................................................................
			  Client Side Web apps

1.SPA
Single Page Web Apps -  2007 to till date
   built at client side,accessed by clients browsers.
   built using javascript,html 5,css 3 

.....................................................................................
			 React and Web Stack
....................................................................................

React was created to build SPA Web apps by face book at 2013.


				     React

   "React is modern SPA lib created by face book based on "Flux Design Pattern"

.....................................................................................

Architecture for libs and frameworks:

Plain JS
			 Application(dom) -plain js
			     |
			 Javascript Engine
			      |
			  Browser Engine




Framework/lib
			 Application(JQuery)
			     |
		       ---------------------------
			  JQuery Engine	------javascript programming		
                       -------------------------------
			      |
			 Javascript Engine -C/C++
			      |
			  Browser Engine



What is jquery engine?
  Jquery engine is also javascript program.




Angular
			 Application(Angular)
			     |
		       ---------------------------
			  Angular Engine : Renderer(Ng2) Renderer2(Ng4,5),Ivy(6,7)		
                       -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine

React


		       Application(React)
			     |
		       ---------------------------
	              React Engine :React fiber-->React 16 on wards		
                      ---------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine


React Engine itself is javascript
.....................................................................................
			  React Echo system
....................................................................................

Where is react used? What type of apps u can build using react.

React is every where from building browser based apps , mobile apps,server side web apps.
What ever type of app you build "React core" remains same.

React can be used to build application for 
........................................
1.browsers : Desktop -  Reactjs - SPA
2.Mobile Apps : React Native
3.Server side Apps: "Next.js"

face book is working on many futures projects related to react
4.React VR : Virtual Reality.
5.React Car : For car applications
6.React TV  : React for TV.
7.React IOT : any devices
...................................................................................
			   React core 
..................................................................................
React apps are written using a language called "JSX"

JSX language features are same but its "mark up" syntax would be different.

For Browser JSX markup would be "HTML"
For Mobile JSX markup would be "Mobile Elements"
.....................................................................................
React and Browser:
..................

Project setup:
..............
npx create-react-app my-app

cd my-app>npm start
.....................................................................................

User interface is designed in browser based on HTML.

Types of UI in browser:

1.static ui 
   ui is created by hard coding html 
  <img src="log.png/>
2.Dynamic UI
   UI is created by programs
 Server side:
    UI is created dynamically at server by programming languages like java(servlets/jsp),php,aspx,phython,node.js etc... and sent to browser.

 Client side:
  UI is created dynamically at client side (inside browser) by programming language called "js"- like js frameworks or libs react,angular,vue.js,etc....
...................................................................................
			      Widget
....................................................................................

Widget represents a single ui or collection of many ui.

for eg : Panel or Page, Button,Gallery....
.............................&&&&&&&&&...............................................
				Component
....................................................................................

Component is term which represents "Widget".

In React we create components using js dynamically.
.....................................................................................
				UI - HTML Arch
.....................................................................................
Widget/Component:

  Components are organized as "tree" model
  

 Profile
    |
   | Image
   Description   
     
                 "Every Component is Object"

When you compose Objects, which forms "Object tree", which is called "Component tree"
.....................................................................................
			  React is component driven lib
.....................................................................................

Every React app must have single root element(Component)-App

import ReactDOM from 'react-dom/client';

//create root component
const App = <h1>Welcome to React!</h1>
// const rootElement = document.getElementById('root')
const root = ReactDOM.createRoot(document.getElementById('root'))
//render will insert rootComponent into <div>?</div>
root.render(App)

How to create Components in react?

We have three patterns.

1.Variable Pattern
2.function pattern
3.ES 6 class Pattern
    

1.Variable Pattern:

import ReactDOM from 'react-dom/client';

const App = <h1>Welcome to React!</h1>

Here App is just variable , right side is component

2.Functions 

import ReactDOM from 'react-dom/client';

//Create Component using functions 
//Es 5 style
// function App() {
//     //Returns Component
//     return <h1>Wecome to React</h1>
// }
// const App = () => {
//     return <h1>Wecome to React</h1>
// }
const App = () => <h1>Wecome to React</h1>

const root = ReactDOM.createRoot(document.getElementById('root'))
//Calling function which inserts Component : but it is not recommended
//root.render(App())
root.render(<App></App>)

3.Using ES 6 Class:
 Now a days , es 6 class syntax is not used mostly.

import React from 'react';
import ReactDOM from 'react-dom/client';

//class 
class App extends React.Component {

    //override render method
    render(){
        return <h1>Welcome to React</h1>
    }
}

const root = ReactDOM.createRoot(document.getElementById('root'))

root.render(<App></App>)

.....................................................................................	
				JSX Rules
.....................................................................................

JSX - Javascript and XML

What is JSX?
 JSX is dsl language to create user interfaces

What is relationship with XML?

 Inside JSX , we write javascript code and HTML code only not xml code.

Why the term XML is used?

 When we write JSX code, we need stable mark up standards.

You know very well HTML has weak parser  that means 
 <h1>hello
when run the code , the html parser does not stop rendering hello, it never throws any error

in order to avoid instability code inside jsx during compilation, JSX team adopted XML Parser rules, since XML parser has strong parser

Basic XML  rules:

1.every opened element must be closed
  <h1>Hello</h1>
  <Welcome></Welcome>
 some elements may not have closing tag
  <img /> : image element has no child elements : self closing. 

2. In xml you must have one single root element.
  all elements must be organized under single root element.

 <h1>Welcome to React</h1>
 <p>Path finder</p>

In html what can be root element
 <div>,<span>,all html 5 layout elements header,footer,section,aside...

3.Component names should start with Uppercase,generally would be noun.
  App ,app
.....................................................................................
				 How jsx code gets compiled?
....................................................................................

How code gets compiled?

source code: jsx code

function Welcome() {
      return <h1>Welcome To React!</h1>;
}
	|
     babel.js - compiler 
|	
|
compiled code
function Welcome() {
  return React.createElement(
    'h1',
    null,
    'Welcome To React!'
  );
}
|
runtime : react engine
function Welcome() {
  return React.createElement(
    'h1',
    null,
    'Welcome To React!'
  );
}
|
//React.createElement
function createElement(args){
   document.createElement(args); // low level api call
}
....................................................................................
  		 Component Tree -Component Composition

....................................................................................
How to break large ui into smaller and smallar.

Why we need to create components?
 -Resuablity

DRY

How to create Component tree?

Lets look at the below markup and start thinking in the terms of components...

Blog
<article>
 <h1>My First Component</h1>
 <ol>
   <li>Components are building blocks</li>
   <li>Components helps to reuse</li>
   <li>Components helps to scale ui</li>
 </ol>
</article>

...
import React from 'react';
import ReactDOM from 'react-dom/client';

//React Fragements: invisble container element which is used to escape compile time errors without using container element.

const ArticleListItemDetails = () => <>
    <li>Components are building blocks</li>
    <li>Components helps to reuse</li>
    <li>Components helps to scale ui</li>
</>

const ArticleListItem = () => <ol>
    <ArticleListItemDetails />
</ol>

const ArticleTitle = () => <h1>Article title</h1>

const ArticleList = () => <ArticleListItem />
const Article = () => {
    return <article>
        <ArticleTitle />
        <ArticleList />
    </article>
}
const Blog = () => {
    return <Article />
}

const App = () => {
    return <div>
        <Blog />
    </div>
}

const root = ReactDOM.createRoot(document.getElementById('root'))
root.render(<App />)

....................................................................................
			  Modularzation and Project layout
.....................................................................................

It means to spilt code,and to keep inside folders and files

Is there a recommended way to structure React projects?

React doesn’t have opinions on how you put files into folders. That said there are a few common approaches popular in the ecosystem you may want to consider.

1.Grouping by features or routes - This is recommended
2.Grouping by file types -  This is not recommended for large 
projects


common/
  Avatar.js
  Avatar.css
  APIUtils.js
  APIUtils.test.js
feed/
  index.js
  Feed.js
  Feed.css
  FeedStory.js
  FeedStory.test.js
  FeedAPI.js
profile/
  index.js
  Profile.js
  ProfileHeader.js
  ProfileHeader.css
  ProfileAPI.js


profile,feed,customers,products,payments which are "features"

Grouping by file type

api/
  APIUtils.js
  APIUtils.test.js
  ProfileAPI.js
  UserAPI.js
components/
  Avatar.js
  Avatar.css
  Feed.js
  Feed.css
  FeedStory.js
  FeedStory.test.js
  Profile.js
  ProfileHeader.js
  ProfileHeader.css

Now you can refer code base:
src
 |
 blogs
   | 
  xxx
  xx
App.js
index.js
....................................................................................
				 React dev tool
.....................................................................................

React dev tool is used to visuaalize the compoent tree...
https://react.dev/learn/react-developer-tools

Assignment -1:

Build Layouts based on compoenent composition

 App
  |
 Page
   Header
     ->Logo
     ->SearchBar
   Body 
     ->Have three Articles
   Footer
     ->Copyrigh
.....................................................................................				   Data and React
....................................................................................
Data is going to give UI more dynamic.
{} -  data interpolation - data binding

data can be primitives - string,number,boolean
data can be objects - {}
data can be list/array - []

How to pass data to the component?

1.Property pattern - props pattern
2.State Pattern

Data binding:
import React from 'react';
import ReactDOM from 'react-dom/client';

const User = () => {
    const id = 1;
    const name = 'Subramanian'
    const status = true
    const address = {
        city: 'Coimbatore',
        state: 'Tamil Nadu'
    }
    const skills = ['Java', 'Javascript', 'react', 'Next', 'Microservices']
    return <div>
        <h1>Id : {id}</h1>
        <h2>Name : {name}</h2>
        <h3>Status: {status ? "Available" : "Not Available"}</h3>
        <h2>Address</h2>
        <address>
            <p>{address.city}</p>
            <p>{address.state}</p>
        </address>
        <h3>Skills</h3>
        <ol>
            {
                skills.map((skill) => {
                    return <li>{skill}</li>
                })
            }
        </ol>
    </div>
}
.....................................................................................
				Property Pattern
.....................................................................................

Any Component is configurable.
Component can display data based on configuration.
I have created Grid Component,Image,Link
Component must accept any type of data..

Data can be passed outside component - from the parent component.
if you pass data from parent component to child component - Props pattern  
which is similar to function args only.



import React from 'react';
import ReactDOM from 'react-dom/client';


// const User = (name,id) => {
//     return <>
//       {name} {id}
//     </>
// }

// const User =(userinfo)=>{
//     console.log(userinfo)
//      return <h1>{userinfo.name}</h1>
// }

// const User = (props) => {
//     console.log(props)
//     return <div>
//         <h1>Id : {props.id}</h1>
//         <h2>Name : {props.name}</h2>
//         <h3>Status: {props.status ? "Available" : "Not Available"}</h3>
//         <h2>Address</h2>
//         <address>
//             <p>{props.address.city}</p>
//             <p>{props.address.state}</p>
//         </address>
//         <h3>Skills</h3>
//         <ol>
//             {
//                 props.skills.map((skill) => {
//                     return <li>{skill}</li>
//                 })
//             }
//         </ol>
//     </div>
// }

// const User = (props) => {
//     console.log(props)
//     const { id, name, status, address: { city, state }, skills } = props;
//     return <div>
//         <h1>Id : {id}</h1>
//         <h2>Name : {name}</h2>
//         <h3>Status: {status ? "Available" : "Not Available"}</h3>
//         <h2>Address</h2>
//         <address>
//             <p>{city}</p>
//             <p>{state}</p>
//         </address>
//         <h3>Skills</h3>
//         <ol>
//             {
//                 skills.map((skill) => {
//                     return <li>{skill}</li>
//                 })
//             }
//         </ol>
//     </div>
// }

const User = ({ id, name, status, address: { city, state }, skills }) => <div>
    <h1>Id : {id}</h1>
    <h2>Name : {name}</h2>
    <h3>Status: {status ? "Available" : "Not Available"}</h3>
    <h2>Address</h2>
    <address>
        <p>{city}</p>
        <p>{state}</p>
    </address>
    <h3>Skills</h3>
    <ol>
        {
            skills.map((skill) => {
                return <li>{skill}</li>
            })
        }
    </ol>
</div>



const App = () => {
    const id = 1;
    const name = 'Subramanian'
    const status = true
    const address = {
        city: 'Coimbatore',
        state: 'Tamil Nadu'
    }
    const skills = ['Java', 'Javascript', 'react', 'Next', 'Microservices']

    //return User('Subramanian',1);
    return <>
        <User name={name} id={id} status={status} address={address} skills={skills} />
        <User name={'Ram'} id={2} status={status} address={{ city: 'Chennai', state: 'Tamil Nadue' }} skills={['Devops', 'Cloud']} />
    </>
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);

.....................................................................................
				Modularization and Props

When component is broken into many components , data also need to be transfered from the parent to child.
import React from 'react';
import ReactDOM from 'react-dom/client';


export const Address = ({ city, state }) => <>
    <h2>Address</h2>
    <address>
        <p>{city}</p>
        <p>{state}</p>
    </address>
</>
const Skills = ({ skills }) => <><h3>Skills</h3>
    <ol>
        {
            skills.map((skill) => {
                return <li>{skill}</li>
            })
        }
    </ol>
</>
export const UserDetails = ({ id, name, status, address, skills }) => <> <h1>Id : {id}</h1>
    <h2>Name : {name}</h2>
    <h3>Status: {status ? "Available" : "Not Available"}</h3>
    <Address address={address} />
    <Skills skills={skills} />
</>

export const User = ({ id, name, status, address, skills }) => <div>
    <UserDetails id={id} name={name} address={address} skills={skills} />
</div>



const App = () => {
    const id = 1;
    const name = 'Subramanian'
    const status = true
    const address = {
        city: 'Coimbatore',
        state: 'Tamil Nadu'
    }
    const skills = ['Java', 'Javascript', 'react', 'Next', 'Microservices']

    //return User('Subramanian',1);
    return <>
        <User name={name} id={id} status={status} address={address} skills={skills} />
        <User name={'Ram'} id={2} status={status} address={{ city: 'Chennai', state: 'Tamil Nadue' }} skills={['Devops', 'Cloud']} />
    </>
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);
....................................................................................
			  Property rethrow
....................................................................................

React uses a opertaor called "Spread Operator" to refactor passing props from the parent child.

export const User = ({ id, name, status, address, skills }) => <div>
    <UserDetails id={id} name={name} address={address} skills={skills} />
</div>
 In this code we pass every prop manually, which makes code more complex.

The above code can be simplified using 'spread operator'

export const User = props => <div>
    <UserDetails {...props} />
</div>
.....................................................................................
			  Default Props
...................................................................................

What if i dont pass props to the child component, which causes runtime error.
in order to avoid runtime errors, and also configure the componet with default Default Props.

import ReactDOM from 'react-dom/client';

const id = 1;
const name = 'Subramanian'
const status = true
const address = {
    city: 'Coimbatore',
    state: 'Tamil Nadu'
}
const skills = ['Java', 'Javascript', 'react', 'Next', 'Microservices']

const User = () => <div>
    <UserDetails />
    <UserDetails id={id} name={name} />

</div>

const UserDetails = props => {
    return <div>
        <h1>Id : {props.id}</h1>
        <h2>Name : {props.name}</h2>
        <h3>Status: {props.status ? "Available" : "Not Available"}</h3>
        <h2>Address</h2>
        <address>
            <p>{props.address.city}</p>
            <p>{props.address.state}</p>
        </address>
        <h3>Skills</h3>
        <ol>
            {
                props.skills.map((skill) => {
                    return <li>{skill}</li>
                })
            }
        </ol>
    </div>
}

//default Property
UserDetails.defaultProps  = {
    id: 0,
    name: 'Your Name',
    status: false,
    skills:['skill1','skill2','skill3'],
    address: {
        city: 'Your City',
        state: 'Your State'
    }
}



const App = () => <User />
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);
	
.....................................................................................
				class Component with Props

import ReactDOM from 'react-dom/client';
import React from 'react';

const id = 1;
const name = 'Subramanian'
const status = true
const address = {
    city: 'Coimbatore',
    state: 'Tamil Nadu'
}
const skills = ['Java', 'Javascript', 'react', 'Next', 'Microservices']

const User = () => <div>
    <UserDetails />
    <UserDetails id={id} name={name} />

</div>

class UserDetails extends React.Component {

    render() {
        return <div>
            <h1>Id : {this.props.id}</h1>
            <h2>Name : {this.props.name}</h2>
            <h3>Status: {this.props.status ? "Available" : "Not Available"}</h3>
            <h2>Address</h2>
            <address>
                <p>{this.props.address.city}</p>
                <p>{this.props.address.state}</p>
            </address>
            <h3>Skills</h3>
            <ol>
                {
                    this.props.skills.map((skill) => {
                        return <li>{skill}</li>
                    })
                }
            </ol>
        </div>
    }
}

//default Property
UserDetails.defaultProps = {
    id: 0,
    name: 'Your Name',
    status: false,
    skills: ['skill1', 'skill2', 'skill3'],
    address: {
        city: 'Your City',
        state: 'Your State'
    }
}



const App = () => <User />
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);
.....................................................................................
			   State Pattern
.....................................................................................

How to declare state with in component?
How we can interact with user - Event Handling.
Hooks

.....................................................................................
				State
....................................................................................

What is state?
  Data is encapsulated inside compoent

How to declare state?
 =>inside class component - until react 17
 =>inside functions - using Hooks- Recommended.
How to interact with ui? - Event handling
 

How to mutate state? - Pure functions


Eg: How to declare State?

import React from 'react'
import ReactDOM from 'react-dom/client'
import 'bootstrap/dist/css/bootstrap.css'
import './index.css'
import './App.css'

class Review extends React.Component {
    //state declaration
    state = {
        like: 0,
        dislike: 0
    }
    render() {
        console.log('state ', this.state)
        return <div className="container">
            <h1>Review App- State</h1>
            <h2>Like {this.state.like} Dislike {this.state.dislike}</h2>
        </div>
    }
}


const App = () => {
    return <>
        <Review />
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'))
root.render(<App />)

.....................................................................................

Event Binding:
import React from 'react'
import ReactDOM from 'react-dom/client'
import 'bootstrap/dist/css/bootstrap.css'
import './index.css'
import './App.css'

class Review extends React.Component {
    //state declaration
    state = {
        like: 0,
        dislike: 0
    }
    //listener 
    onLike = () => {
        //write biz logic to increment likes
        console.log('onLike')
    }

    render() {
        console.log('state ', this.state)
        return <div className="container">
            <h1>Review App- State</h1>
            <h2>Like {this.state.like} Dislike {this.state.dislike}</h2>
            {/* Event binding */}
            <button onClick={this.onLike} className="btn btn-success" style={{ padding: 10, marginRight: 10 }}>Like</button>
            <button className="btn btn-success" style={{ padding: 10, marginRight: 10 }}>Dislike</button>
        </div>
    }
}


const App = () => {
    return <>
        <Review />
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'))
root.render(<App />)
..................................................................................
				 State Mutation



if you run the code below, the UI update never be triggered

Why?
import React from 'react'
import ReactDOM from 'react-dom/client'
import 'bootstrap/dist/css/bootstrap.css'
import './index.css'
import './App.css'

class Review extends React.Component {
    //state declaration
    state = {
        like: 0,
        dislike: 0
    }
    //listener 
    onLike = () => {
        //write biz logic to increment likes
        console.log('onLike')
        this.state.like++
        console.log('listener state ',this.state)
        this.render()
    }

    render() {
        console.log('render state ', this.state)
        return <div className="container">
            <h1>Review App- State</h1>
            <h2>Like {this.state.like} Dislike {this.state.dislike}</h2>
            {/* Event binding */}
            <button onClick={this.onLike} className="btn btn-success" style={{ padding: 10, marginRight: 10 }}>Like</button>
            <button className="btn btn-success" style={{ padding: 10, marginRight: 10 }}>Dislike</button>
        </div>
    }
}


const App = () => {
    return <>
        <Review />
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'))
root.render(<App />)



How React updates UI?

via "render method"

render:
 
=>it is method called by "react engine".
     can we call render directly inside event listener?
        Yes,but no impact on ui update 
    onIncrement = () => {
         //increment value of state 
        this.state.value = this.state.value + 1
        console.log("value : ",this.state.value)
        this.render()
    }
   Note : render should not be called directly


...................................................................................
		Functional Programming Principles and React
..................................................................................
Pure Functions:

 Pure functions are defined by two rules
Rule A and Rule B.

Rule A:
  If function receives input, the function returns the same input without any mutation.
  Every Component with respect to props, are pure functions.
//Pure functions Rule A:

/**
 *   If function receives input, the function returns the same input without any mutation.
 */
//this functio is pure or not?

//this function is impure:React never recommends this type functions
function updateProfile(profile, city) {
    profile.city = city
    return profile;
}
const profile = {
    id: 1,
    name: 'subramanian',
    city: 'New York'
}
console.log('Before Update', profile)
const updatedProfile = updateProfile(profile, 'Coimbatore')
console.log('After Update', updatedProfile)


//here the funciton never modifies the variable
//this function just returns data as it it: Pure function
//every component is pure function with respect to props
function Header(props) {
    return `<h1>${props.name}</h1>`
}
console.log(Header({ name: 'subramanian' }))

React and Pure functions Rule A- and props

import React from 'react'
import ReactDOM from 'react-dom/client'


const Greeting = props => {
    console.log(props)
    //update props 
    //props are read only
    props.name ='foo'
    return <h1>Hello {props.name}</h1>
}
const App = () => {
    return <Greeting name="Subramanian" />  
}


const root = ReactDOM.createRoot(document.getElementById('root'))
root.render(<App />)
.....................................................................................					Rule B
.....................................................................................


What if function receives input, need to be mutated but it should follow the pure function rule.

With help of "Immutablity"

What is immutable?

creating new object every time when you update the object , immutablity.

if the function does that , that function is called pure function.

pure function must return, "immutable object".
//Pure functions Rule B:
/**
 * 
 What if function receives input, need to be mutated but it should follow the pure function rule.

With help of "Immutablity"
 */

//pure functions : immutablity
/**
 * immutablity implementation patterns
 *  1.using plain javascript
 *  2.using Object.assign method
 *  3.using es 7 spread operator
 */

function updateProfile(profile, city) {
    //return new object : profile

    ////1.using plain javascript
    // return {
    //     id: profile.id,
    //     name: profile.name, 
    //     city: city
    // }
    //2.using Object.assign method
    //  return Object.assign({}, profile, { city: city })

    //using spread operator
    return { ...profile, city: city }
}
const profile = {
    id: 1,
    name: 'subramanian',
    city: 'New York'
}
console.log('Before Update', profile)
const updatedProfile = updateProfile(profile, 'Coimbatore')
console.log('After Update', updatedProfile)
//check mutable or immutable 
console.log(profile === updatedProfile ? "Same Object" : "Different Object")

List of Array immutable apis:

1.concat == Adding new item
2.map => iterate and transform,update
3.filter,slice =>delete
3.reverse,sort - sorting and reversion
.....................................................................................
			  Rule B :State Mutations
.....................................................................................How to call render?
render is called by react engine only.
how react engine will triger render?
  via React api "setState() ,forceUpdate()"


Syntax:

setState(updater, [callback])

updater = it is function
callback =it is also function which optional parameter

updater:
 function having state mutation logic

step1:
    this.setState(function(){
            console.log('state mutation logic goes')
        })

updater function syntax:

takes two args

1.state  is just variable you can have any name - holds the value of state object
 which is called as "previous state" or "old state"
2.props is just variable holding current props variable- which is optional

function(state,[props]){
            console.log('state mutation logic goes')
}

function(prevState){
            console.log('state mutation logic goes')
}

Updater function returns object, what object, if you want to understand this , we need to under one more functional programming principle called "Pure function 2nd Rule".

Updater function returns object, what object, if you want to understand this , we need to understand one more functional programming principle called "Pure function 2nd Rule".

import React from 'react'
import ReactDOM from 'react-dom/client'
import 'bootstrap/dist/css/bootstrap.css'
import './index.css'
import './App.css'

class Review extends React.Component {
    //state declaration
    state = {
        like: 0, //0 => 1 =>2=>3
        dislike: 0
    }
    //listener 
    onLike = () => {
        //implement pure functions
        this.setState((oldState) => {
            console.log('Old State/Previous State', oldState)
            //must return immutable the state of compoent
            // return {
            //     like: oldState.like + 1,
            //     dislike: oldState.dislike
            // }
            //return Object.assign({}, oldState, { like: oldState.like + 1 })
            return { ...oldState, like: oldState.like + 1 }
        })
    }

    render() {
        console.log('current state ', this.state)
        return <div className="container">
            <h1>Review App- State</h1>
            <h2>Like {this.state.like} Dislike {this.state.dislike}</h2>
            {/* Event binding */}
            <button onClick={this.onLike} className="btn btn-success" style={{ padding: 10, marginRight: 10 }}>Like</button>
            {/* inline listener */}
            <button onClick={() => {
                this.setState(oldState => {
                    return { ...oldState, dislike: oldState.dislike + 1 }
                })

            }} className="btn btn-success" style={{ padding: 10, marginRight: 10 }}>Dislike</button>
        </div>
    }
}


const App = () => {
    return <>
        <Review />
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'))
root.render(<App />)

Generally The state is also going to represent data, which is mutatble(changeable)



import ReactDOM from 'react-dom/client';
import React from 'react';

class Counter extends React.Component {

    //state declaration
    state = {
        counter: 0 //inital state
    }
    //listener 
    onIncrement = () => {
        console.log('button is clicked')
        // this.setState(function (prvState) {
        //     //you must return immutable state object 
        //     //we must return new state every time 
        //     return {
        //         counter: prvState.counter + 1
        //     }
        // })
        // this.setState(prvState => {
        //     return {
        //         counter: prvState.counter + 1
        //     }
        // })

        // this.setState(prvState => {
        //     //Return object using Object.assign method
        //     return Object.assign({}, prvState, { counter: prvState.counter + 1 })
        // })
        //Using Es 7 Spread Operator
        this.setState(prvState => {
            //Return object using Object.assign method
            return { ...prvState, counter: prvState.counter + 1 }
        })
    }

    render() {
        console.log(this.state)
        return <div>
            <h1>Counter App</h1>
            <h2>Value {this.state.counter}</h2>
            <button onClick={this.onIncrement} >+</button>
        </div>
    }
}


const App = () => <>
    <Counter />
</>


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);

....................................................................................
			  Multiple state variables,inline listeners

import ReactDOM from 'react-dom/client';
import React from 'react';

class Review extends React.Component {

    //state declaration
    state = {
        like: 1,
        dislike: 10
    }
    onLike = () => {
        this.setState(preState => {
            // return {
            //     like: preState.like + 1,
            //     dislike: preState.dislike
            // }
            //return Object.assign({}, preState, { like: preState.like + 1 })
            return { ...preState, like: preState.like + 1 }
        })
    }
    onDislike = () => {
        this.setState(preState => {
            return { ...preState, dislike: preState.dislike + 1 }
        })
    }

    render() {
        console.log(this.state)
        return <div>
            <h1>Review App</h1>
            <h2>Like {this.state.like} Dislike {this.state.dislike}</h2>
            <button onClick={this.onLike} >Like</button>
            <button onClick={this.onDislike} >Dislike</button>
            {/* inline listener */}
            <button onClick={() => {
                this.setState(preState => {
                    return { ...preState, like: preState.like + 1 }
                })
            }}>Like</button>
        </div>
    }
}


const App = () => <>
    <Review />
</>


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);
.....................................................................................
			   props and state
....................................................................................

Component can have

1.state
2.biz logic-listeners
3.UI 

According to component driven design , we need to isloate the state and biz logic into one component -StateFull Component

The Component which should recive state data from the component which is called -Stateless component


Parent
1.state
2.biz logic-listeners
 	|
     state as prop - dynamic props
Child
3.UI


import ReactDOM from 'react-dom/client';
import React from 'react';

class Review extends React.Component {
    state = {
        like: 1,
        dislike: 10
    }
    onLike = () => {
        this.setState(preState => {
            return { ...preState, like: preState.like + 1 }
        })
    }
    onDislike = () => {
        this.setState(preState => {
            return { ...preState, dislike: preState.dislike + 1 }
        })
    }

    render() {
        return <div>
            <ReviewDisplay {...this.state} onLike={this.onLike} onDislike={this.onDislike} />
        </div>
    }
}

const ReviewDisplay = props => {
    console.log(props)
    return <> <h1>Review App</h1>
        <h2>Like {props.like} Dislike {props.dislike}</h2>
        <button onClick={props.onLike} >Like</button>
        <button onClick={props.onDislike} >Dislike</button>
    </>
}


const App = () => <>
    <Review />
</>


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);
.....................................................................................
				Hooks
....................................................................................
What is hook?
 It is a new feature introduced in react 16.
 Simple abstraction for class compoents-  how to remove classes from react.

Intention is functional component for every things.

objective of hooks:

1.to eleminate class components as much possible.
2.Resuable application behaviours
   eg:ajax calls


Hook is just simple javascript function.
which may take arg or may not.
Which may or may not return something 	


every hook function starts with
  "use"+functionName ==>hook Syntax

eg:
"useState"
"useContext"
"useEffect"
"useAjax"
"useWebSocket"
"useLayout"
etc....
you can create your own hooks as well.


Simple Hook:
import ReactDOM from 'react-dom/client';
import React, { useState } from 'react';


const Counter = props => {
    //state declaration
    const [counter, setCounter] = useState(0)

    const onIncrement = () => {
        setCounter((prevCounter) => {
            console.log(prevCounter)
            return prevCounter + 1
        })
    }

    return <div>
        <h1>Counter App</h1>
        <h1>Counter {counter}</h1>
        <button onClick={onIncrement}>+</button>
    </div>
}


const App = () => <>
    <Counter />
</>


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);
.....................................................................................
import ReactDOM from 'react-dom/client';
import React, { useState } from 'react';


const Review = props => {
    //state declaration
    const [review, setReview] = useState({ like: 0, dislike: 0 })

    const onLike = () => {
        setReview(prevReview => {
            return { ...prevReview, like: prevReview.like + 1 }
        })
    }

    return <div>
        <h1>Review App</h1>
        <h1>Like {review.like} Dislike {review.dislike}</h1>
        <button onClick={onLike}>Like</button>
        <button onClick={() => {
            setReview(prevReview => {
                return { ...prevReview, dislike: prevReview.dislike + 1 }
            })
        }}>Dislike</button>

    </div>
}


const App = () => <>
    <Review />
</>


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);

























